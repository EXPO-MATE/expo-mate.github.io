var isHomePage=$("body.homepage");isHomePage&&($.fn.isInViewport=function(){var e=$(this);if("undefined"!==e&&e.length){var t=$(this).offset().top,a=t+$(this).outerHeight(),o=$(window).scrollTop(),n=o+$(window).height();return o<a&&t<n}});var map,aboutAnimationHasRan=!1,aboutUsAnimationHasRan=!1,valuesAnimationHasRan=!1,headerAnimationHasRan=!1,brandsAnimationHasRan=!1,headerElem=$("#header"),aboutElem=$("#about"),brandsElem=$(".brandlist"),aboutUsElem=$("#aboutUs"),valuesElem=$("#values");function fireAnimations(){if(isHomePage&&0<headerElem.length&&headerElem.isInViewport()){var e=$("#header .logo"),t=$("#header h1"),a=$("#header .icon-play");headerAnimationHasRan||(TweenMax.fromTo(e,.5,{css:{y:"-30",opacity:0}},{css:{y:"0",opacity:"1"}}),TweenMax.fromTo(t,.5,{css:{y:"-30",opacity:0}},{css:{y:"0",opacity:"1"},delay:.3}),TweenMax.fromTo(a,.5,{opacity:0,scale:1.5,ease:Bounce.ease},{opacity:1,scale:1}),headerAnimationHasRan=!0)}if(isHomePage&&0<headerElem.length&&aboutElem.isInViewport()){var o=$("#about > .left-container"),n=$("#about > .right-container");aboutAnimationHasRan||(TweenMax.fromTo(o,1,{css:{x:"-100",opacity:0}},{css:{x:"0",opacity:"1"},delay:1}),TweenMax.fromTo(n,1,{css:{x:"100",opacity:0}},{css:{x:"0",opacity:"1"},delay:1}),aboutAnimationHasRan=!0)}if(isHomePage&&0<aboutUsElem.length&&aboutUsElem.isInViewport()){var i=$(".employee-wrapper");aboutUsAnimationHasRan||(TweenMax.staggerFromTo(i,1,{css:{x:"-100",opacity:0}},{css:{x:"0",opacity:"1"},delay:1},.5),aboutUsAnimationHasRan=!0)}if(isHomePage&&0<brandsElem.length&&brandsElem.isInViewport()){var s=brandsElem.find("li");5<$(".brandlist li").length?$(".brandlist").slick({slidesToShow:5,slidesToScroll:1,autoplay:!0,autoplaySpeed:3e3,arrows:!1,swip:!0,responsive:[{breakpoint:600,settings:{slidesToShow:3,slidesToScroll:1}}]}):brandsAnimationHasRan||(TweenMax.staggerFromTo(s,.5,{css:{x:"-40",opacity:0}},{css:{x:"0",opacity:"1"},delay:.2},.2),brandsAnimationHasRan=!0)}if(isHomePage&&0<valuesElem.length&&valuesElem.isInViewport()){var d=$(".valueItem");valuesAnimationHasRan||($.each(d,function(){var e=$(this).find("strong"),t=(-1*Math.random()+1.5).toFixed(2);TweenMax.fromTo(e,1,{css:{x:"-10",opacity:0}},{css:{x:"0",opacity:"1"},delay:t})}),valuesAnimationHasRan=!0)}if(isHomePage&&0<aboutUsElem.length&&aboutUsElem.isInViewport()){var c=$(".employee-wrapper");aboutUsAnimationHasRan||(TweenMax.staggerFromTo(c,1,{css:{x:"-100",opacity:0}},{css:{x:"0",opacity:"1"},delay:1},.5),aboutUsAnimationHasRan=!0)}}function getDirection(e,t,a){Math.abs(t-e)<=5||a(t<e?"down":"up",e)}function handleMethodScroll(e){var t="method",a=".fadeIn",o=".method-item",n=".intro",i=".design",s=".tuning",d=".construction";$(a).removeClass(t),$(o).removeClass(t),1===e?($(a+n).addClass(t),$(o+n).addClass(t)):2===e?($(o+n).addClass(t),$(a+i).addClass(t),$(o+i).addClass(t)):3===e?($(o+n).addClass(t),$(o+i).addClass(t),$(a+s).addClass(t),$(o+s).addClass(t)):4===e?($(o+n).addClass(t),$(o+i).addClass(t),$(o+s).addClass(t),$(a+d).addClass(t),$(o+d).addClass(t)):5===e&&($(o+n).addClass(t),$(o+i).addClass(t),$(o+s).addClass(t),$(o+d).addClass(t),$(a+".eval").addClass(t),$(o+".eval").addClass(t))}function setCookie(e,t,a){var o="";if(a){var n=new Date;n.setTime(n.getTime()+24*a*60*60*1e3),o="; expires="+n.toUTCString()}document.cookie=e+"="+(t||"")+o+"; path=/"}function getCookie(e){for(var t=e+"=",a=document.cookie.split(";"),o=0;o<a.length;o++){for(var n=a[o];" "==n.charAt(0);)n=n.substring(1,n.length);if(0==n.indexOf(t))return n.substring(t.length,n.length)}return null}function eraseCookie(e){document.cookie=e+"=; Max-Age=-99999999;"}function chooseCookie(){var e=navigator.language||navigator.userLanguage,t=getCookie("lang"),a=getParameterByName("lang");null==t||""===t?(e.match(/de/g)?setCookie("lang","de",7):e.match(/en/g)?setCookie("lang","en",7):(e.match(/nl/g),setCookie("lang","nl",7)),setTimeout(function(){window.location.reload()},20)):$("body").addClass(t),void 0!==a&&"de"===a?setCookie("lang","de",7):void 0!==a&&"en"===a?setCookie("lang","en",7):void 0!==a&&"nl"===a&&setCookie("lang","nl",7),setTimeout(function(){$("#nav .active-loc").html(getCookie("lang"))},200)}function getParameterByName(e,t){t||(t=window.location.href),e=e.replace(/[\[\]]/g,"\\$&");var a=new RegExp("[?&]"+e+"(=([^&#]*)|&|#|$)").exec(t);return a?a[2]?decodeURIComponent(a[2].replace(/\+/g," ")):"":null}function fixNav(e){var t=$("#nav");500<=e?t.addClass("fixed"):t.removeClass("fixed")}function trackLocation(e){var t=$(".slick-active .after"),a=$(".slick-active .before"),o=a[0].getBoundingClientRect(),n=a.outerWidth(),i=(e.pageX-o.left)/n*100;i<=100&&t.css("width",i+"%")}function googleMapsInit(){var e=new google.maps.Geocoder,t=$(".contact-details-map").html();void 0!==t&&e.geocode({address:t},function(e,t){if(t==google.maps.GeocoderStatus.OK){var a=e[0].geometry.location.lat(),o=e[0].geometry.location.lng(),n=new google.maps.LatLng(a,o),i={zoom:15,center:n,scrollwheel:!1,navigationControl:!1,mapTypeControl:!1,scaleControl:!1,disableDefaultUI:!0,styles:[{featureType:"landscape",stylers:[{visibility:"simplified"},{color:"#2b3f57"},{weight:.1}]},{featureType:"administrative",stylers:[{visibility:"on"},{hue:"#ff0000"},{weight:.4},{color:"#ffffff"}]},{featureType:"road.highway",elementType:"labels.text",stylers:[{weight:1.3},{color:"#FFFFFF"}]},{featureType:"road.highway",elementType:"geometry",stylers:[{color:"#f55f77"},{weight:3}]},{featureType:"road.arterial",elementType:"geometry",stylers:[{color:"#f55f77"},{weight:1.1}]},{featureType:"road.local",elementType:"geometry",stylers:[{color:"#f55f77"},{weight:.4}]},{},{featureType:"road.highway",elementType:"labels",stylers:[{weight:.8},{color:"#ffffff"},{visibility:"on"}]},{featureType:"road.local",elementType:"labels",stylers:[{visibility:"off"}]},{featureType:"road.arterial",elementType:"labels",stylers:[{color:"#ffffff"},{weight:.7}]},{featureType:"poi",elementType:"labels",stylers:[{visibility:"off"}]},{featureType:"poi",stylers:[{color:"#6c5b7b"}]},{featureType:"water",stylers:[{color:"#f3b191"}]},{featureType:"transit.line",stylers:[{visibility:"on"}]}]};map=new google.maps.Map(document.getElementById("map-canvas"),i);var s=new google.maps.Marker({position:n,icon:"//expo-mate.github.io/assets/images/marker.png",map:map}),d=new google.maps.InfoWindow({content:$(".contact-details-map").html()});450<$(window).width()&&map.panBy(200,-150),google.maps.event.addListener(s,"click",function(){d.open(map,s)})}})}function closeModal(e,t){$("body").removeClass("open");var a=t.parent().data("project");if(t.hasClass("modal"))a=t.data("project");$(".slider").slick("unslick"),document.getElementById("project-"+a).scrollIntoView(!0)}function showModal(e,t){if(e.preventDefault(),!$("body").hasClass("open")){var o=t.data("project");void 0!==o&&($(".modal").data("project",o),$("body").addClass("open"),$.ajax({url:"./assets/json/content.bin",scriptCharset:"utf-8",type:"GET",success:function(e){var t=JSON.parse(decodeURIComponent(escape(window.atob(e))))[getCookie("lang")].pages.projects,i=[],a=t[o].images;a&&0<a.length&&$.each(a,function(e,t){var a=t.src,o=!1,n=a.split(".").pop().toLowerCase();"jpg"!==n&&"png"!==n||(o=!0),t&&o?i.push('<div class="project-image">\n<img src="'+a+'" alt="'+t.header+'" />\n</div>'):i.push('<div class="project-image youtube">\n<div class="youtube-video-embed embed-responsive embed-responsive-16by9" id="video">\n<span>\n    <iframe\n        id="player"\n        class="youtube-video embed-responsive-item"\n        frameborder="0"\n        allowfullscreen="1"\n        allow="autoplay; encrypted-media"\n        title="YouTube video player"\n         src="https://www.youtube.com/embed/'+a+'?autoplay=0&rel=0&fs=1&enablejsapi=1">\n    </iframe>\n  </span>\n  </div>\n </div>')}),sliderInit(i)}}))}}function sliderInit(e){$(".slider").append(e),setTimeout(function(){$(".slider").slick({slidesToShow:1,slidesToScroll:1,autoplay:!0,autoplaySpeed:3e3,arrows:!0,lazyLoad:"onDemand",swip:!0})},100)}$(function(){isHomePage&&(fireAnimations(),$(window).on("resize scroll",function(){fireAnimations()}))}),$(function(){var a=0,o=!1,e=$("#header"),t=$("body.homepage"),n=$(window).height(),i=$(window).width(),s=950,d=0,c=$(".method-item"),l=$(".fadeIn"),r=-1<window.orientation&&screen.width<=640,m=null!=navigator.userAgent.match(/iPad/i),h=$("body").find("[data-content='content-method-hoverLabel']");if($(window).on("mousewheel DOMMouseScroll touchmove",function(){o=!0}),$(window).on("resize",function(){n=$(this).height(),i=$(this).width(),s=$(window).height()/100*20}),void 0!==t&&0<t.length){var p=$("#method"),f=$(".method-scroll-wrapper"),u=p.height(),v=p.offset().top,g=$("#case-studies"),w=~~g.offset().top,y=$("#about"),b=$("#preabout").offset().top,C="active",k="show";(r||m)&&(g.addClass(k),l.addClass(k),y.addClass(k)),$(c).on("mouseenter",function(){var e=$(this).attr("data-item");$(this).addClass("active"),$(".diagram-logo").addClass("hidden"),0<h.length&&h.addClass("hidden"),$(".method-desc."+e).addClass("active"),$("#diagram").addClass(e)}).on("mouseleave",function(){var e=$(this).attr("data-item");$(this).removeClass("active"),$(".diagram-logo").removeClass("hidden"),0<h.length&&h.removeClass("hidden"),$(".method-desc."+e).removeClass("active"),$("#diagram").removeClass(e)}),$(".close-btn").on("click",function(){$("body").toggleClass("isPlaying"),e.removeClass("play"),e.find(".video-container").removeClass("play"),$(".youtube-video-embed iframe").attr("id","").attr("src","")}),$(".play-video-wrapper").on("click",function(){$("body").toggleClass("isPlaying"),e.addClass("play"),e.find(".video-container").addClass("play");$.ajax({url:"./assets/json/content.json",scriptCharset:"utf-8",type:"GET",success:function(e){var t=JSON.parse(decodeURIComponent(escape(window.atob(e))))[getCookie("lang")].pages.homepage.header.content;$(".youtube-video-embed iframe").attr("id",t.youtubeURL).attr("src","https://www.youtube.com/embed/"+t.youtubeURL+"?autoplay=0&rel=0&fs=1&enablejsapi=1")}})}),$(window).on("scroll",function(){d=~~$(this).scrollTop(),n<1100&&(s=1050),c.removeClass(C),getDirection(d,a,function(e,t){(a=t)&&o&&!r&&1200<i&&!m&&("down"===e?(v<=t&&(l.removeClass(k),f.addClass(k),handleMethodScroll(5)),v+u<=t&&(g.addClass(k),l.removeClass(k),f.removeClass(k)),b<=t&&y.addClass(k)):(g.addClass(k),l.addClass(k),y.addClass(k)),"up"===e&&(t<w-s&&(f.addClass(k),handleMethodScroll(5)),t<=v-100&&l.removeClass(C)))})})}}),chooseCookie(),$(function(){var o=!1,n=$("#nav ul"),i=$(".hamburger"),e=$(window).scrollTop();$("#nav li a").on("click",function(e){e.preventDefault();var t=$(this).attr("href");if(-1!==t.indexOf("."))window.location.href=t;else if($(this).hasClass("loc"))eraseCookie("lang"),setCookie("lang",t,7),setTimeout(function(){window.location.reload()},20);else if(-1!==t.indexOf("#")){var a=$(t).offset().top;"#footer"===t?a=$("#contact-info").offset().top:"#comparison"===t&&(a=$("#comparison-wrapper").offset().top),$("html, body").animate({scrollTop:a})}o&&(i.removeClass("is-active"),n.removeClass("open"),o=!1)}),i.click(function(){$(this).toggleClass("is-active"),n.toggleClass("open"),o=!0}),$(window).on("scroll",function(){fixNav(~~$(this).scrollTop())}),$(".contact-btn").on("click",function(){var e=$("footer").offset().top;$("html, body").animate({scrollTop:e})}),fixNav(e)}),$(function(){if($("body").hasClass("homepage")){$.ajax({url:"./assets/json/content.bin",scriptCharset:"utf-8",type:"GET",success:function(e){var t=JSON.parse(decodeURIComponent(escape(window.atob(e))))[getCookie("lang")].pages.homepage.content.comparison,i=$("#comparison"),a=t.comparisons||"";$.each(a,function(e,t){i.append('<div class="item"><img data-content="content-comparison-before" src="'+t.before+'" class="before" alt>\n<div data-content="content-comparison-after" class="after" style="background-image: url('+t.after+')"></div></div>')}),setTimeout(function(){i.not(".slick-initialized").slick({slidesToShow:1,slidesToScroll:1,autoplay:!0,autoplaySpeed:3e3,nextArrow:".icon-arrow-right",prevArrow:".icon-arrow-left",swipeToSlide:!1}),i.on("setPosition",function(e,t,a,o){var n=i.find(".slick-active");n&&(n.on("mousemove",trackLocation),n.on("touchstart",trackLocation),n.on("touchmove",trackLocation))})},200)}})}}),$(function(){var w=$("body");$.ajax({url:"./assets/json/content.bin",scriptCharset:"utf-8",type:"GET",success:function(e){var t=JSON.parse(decodeURIComponent(escape(window.atob(e)))),a=getCookie("lang"),o=t[a],n=o.nav.labels,i=o.pages.homepage,s=i.header.content,d=i.content.intro,c=d.images,l=i.content.about,r=i.content.aboutUs,m=i.content.values,h=i.content.comparison,p=i.content.method,f=i.content.model,u=i.content.projects,v=i.footer;if(o&&w.removeClass("loading"),void 0===a&&chooseCookie(),n){var g=$("#nav > ul > li ");g.find('a[href="#preabout"]').html(n.about),g.find('a[href="index.html#preabout"]').html(n.about),g.find('a[href="#method"]').html(n.method),g.find('a[href="index.html#method"]').html(n.method),g.find('a[href="#values"]').html(n.values),g.find('a[href="index.html#values"]').html(n.values),g.find('a[href="#aboutUs"]').html(n.aboutUs),g.find('a[href="index.html#aboutUs"]').html(n.aboutUs),g.find('a[href="projects.html"]').html(n.projects),g.find('a[href="#footer"]').html(n.contact),g.find('a[href="#footer"]').html(n.contact),g.find('a[href="#mission"]').html(n.mission),g.find('a[href="index.html#mission"]').html(n.mission),g.find('a[href="#model"]').html(n.model),g.find('a[href="index.html#model"]').html(n.model),g.find('a[href="#foundation"]').html(n.foundation),g.find('a[href="index.html#foundation"]').html(n.foundation),g.find('a[href="#comparison"]').html(n.comparison),g.find('a[href="index.html#comparison"]').html(n.comparison)}s&&($(".background-video").css({backgroundImage:s.backgroundImageSrc}),$(".youtube-video-embed iframe").attr("id",s.youtubeURL).attr("src","https://www.youtube.com/embed/"+s.youtubeURL+"?autoplay=0&rel=0&fs=1&enablejsapi=1"),$("video source#mp4").attr("src",s.backgroundVideoMp4Src),$("video source#webm").attr("src",s.backgroundVideoWebMSrc),w.find("[data-content='header-content-title']").html(s.header)),d&&(w.find("[data-content='content-intro-title']").html(d.header),w.find("[data-content='content-intro-desc']").html(d.description),0<$(".brandlist").length&&$.each(c,function(e,t){t.src&&w.find(".brandlist").append('<li><img src="'+t.src+'" alt="'+t.alt+'" /></li>')})),l&&(w.find("[data-content='content-about-row1-title']").html(l.row1.header),w.find("[data-content='content-about-row1-image']").css({backgroundImage:l.row1.image.src}),w.find("[data-content='content-about-row1-desc']").html(l.row1.description),w.find("[data-content='content-about-row2-title']").html(l.row2.header),w.find("[data-content='content-about-row2-image']").css({backgroundImage:l.row2.image.src}),w.find("[data-content='content-about-row2-desc']").html(l.row2.description)),r&&(w.find("[data-content='content-aboutUs-title']").html(r.header),w.find("[data-content='content-aboutUs-description']").html(r.description),w.find("[data-content='content-employee-niek-image']").attr("src",r.employees.niek.image.src).attr("alt",r.employees.niek.image.alt),w.find("[data-content='content-employee-niek-title']").html(r.employees.niek.header),w.find("[data-content='content-employee-niek-desc']").html(r.employees.niek.description),w.find("[data-content='content-employee-jan-image']").attr("src",r.employees.jan.image.src).attr("alt",r.employees.jan.image.alt),w.find("[data-content='content-employee-jan-title']").html(r.employees.jan.header),w.find("[data-content='content-employee-jan-desc']").html(r.employees.jan.description)),m&&(w.find("[data-content='content-values-image']").css({backgroundImage:m.image.src}),w.find("[data-content='content-values-title']").html(m.header),w.find("[data-content='content-values-desc']").html(m.description),w.find("[data-content='content-value1']").html(m.values.value1),w.find("[data-content='content-value2']").html(m.values.value2),w.find("[data-content='content-value3']").html(m.values.value3),w.find("[data-content='content-value4']").html(m.values.value4),w.find("[data-content='content-value5']").html(m.values.value5),w.find("[data-content='content-value6']").html(m.values.value6)),p&&(w.find("[data-content='content-method-title']").html(p.header),w.find("[data-content='content-method-desc']").html(p.description),w.find("[data-content='content-method-hoverLabel']").html(p.hoverLabel),w.find("[data-content='content-method-intro-title']").html(p.methods.intro.header),w.find("[data-content='content-method-intro-desc']").html(p.methods.intro.description),w.find("[data-content='content-method-design-title']").html(p.methods.design.header),w.find("[data-content='content-method-design-desc']").html(p.methods.design.description),w.find("[data-content='content-method-tuning-title']").html(p.methods.tuning.header),w.find("[data-content='content-method-tuning-desc']").html(p.methods.tuning.description),w.find("[data-content='content-method-construction-title']").html(p.methods.construction.header),w.find("[data-content='content-method-construction-desc']").html(p.methods.construction.description),w.find("[data-content='content-method-eval-title']").html(p.methods.eval.header),w.find("[data-content='content-method-eval-desc']").html(p.methods.eval.description)),f&&(w.find("[data-content='content-model-title']").html(f.header),w.find("[data-content='content-model-image']").css({backgroundImage:f.image.src}),w.find("[data-content='content-model-desc']").html(f.description)),u&&(w.find("[data-content='content-projects-title']").html(u.header),w.find("[data-content='content-projects-desc']").html(u.description),w.find("[data-content='content-projects-button']").html(u.button.label),w.find("[data-content='content-project1-image']").attr("src",u.project1.image.src).attr("alt",u.project1.image.alt),w.find("[data-content='content-project1-title']").html(u.project1.header),w.find("[data-content='content-project1-btn']").html(u.project1.button),w.find("[data-content='content-project2-image']").attr("src",u.project2.image.src).attr("alt",u.project2.image.alt),w.find("[data-content='content-project2-title']").html(u.project2.header),w.find("[data-content='content-project2-btn']").html(u.project2.button)),h&&(w.find("[data-content='content-projects-comparison-title']").html(h.header),w.find("[data-content='content-projects-comparison-desc']").html(h.description)),v&&(w.find("[data-content='footer-testimonials-title']").html(v.testimonials.header),w.find("[data-content='footer-contacts-header']").html(v.contacts.header),w.find("[data-content='footer-contacts-jan-title']").html(v.contacts.jan.header),w.find("[data-content='footer-contacts-jan-email']").attr("href",v.contacts.jan.links.email.src).html(v.contacts.jan.links.email.header),w.find("[data-content='footer-contacts-linkedin-jan']").attr("href",v.contacts.jan.links.linkedin.src),w.find("[data-content='footer-contacts-linkedin-jan-title']").html(v.contacts.jan.links.linkedin.header+" "),w.find("[data-content='footer-contacts-call-jan-phone']").attr("href",v.contacts.jan.phone),w.find("[data-content='footer-contacts-niek-title']").html(v.contacts.niek.header),w.find("[data-content='footer-contacts-niek-email']").attr("href",v.contacts.niek.links.email.src).html(v.contacts.niek.links.email.header),w.find("[data-content='footer-contacts-linkedin-niek']").attr("href",v.contacts.niek.links.linkedin.src),w.find("[data-content='footer-contacts-linkedin-niek-title']").html(v.contacts.niek.links.linkedin.header+" "),w.find("[data-content='footer-contacts-call-niek-phone']").attr("href",v.contacts.niek.phone),w.find("[data-content='footer-contacts-phone-header']").html(v.phone.header),w.find("[data-content='footer-contacts-visit-header']").html(v.visit.header),w.find("[data-content='footer-contacts-visit-desc']").html(v.visit.description),w.find("[data-content='footer-copyright-desc']").html(v.copyright.description))}})}),google.maps.event.addDomListener(window,"load",googleMapsInit),$(function(){if($("body").hasClass("projects")){$.ajax({url:"./assets/json/content.bin",scriptCharset:"utf-8",type:"GET",success:function(e){var t=JSON.parse(decodeURIComponent(escape(window.atob(e)))),a=getCookie("lang"),r=t[a].pages.homepage.content.projects.reviewLink||"",o=t[a].pages.projects,m=$("#projects .projects-wrapper");void 0===a&&chooseCookie(),$.each(o,function(e,t){var a=t.images[0].src||"",o=parseInt(e),n=t.review,i=n.author||"",s=n.description||"",d=n.date||"",c=i.replace(/[^A-Z0-9]+/gi,"-").toLowerCase(),l=n.stars||"";m.append('<div class="project" id="project-'+o+'">\n\t<div class="project-wrapper">\n\t\t<div class="project-image">\n       <div data-project="'+o+'" class="project-overview-image" style="background-image: url('+a+')"></div>\n\t\t</div>\n\t\t<div class="project-desc-wrapper">\n\t\t\t<div class="project-desc-content">\n\t\t\t\t<div class="project-header">\n\t\t\t\t\t<h2 class="project-title" data-project="'+o+'">'+t.header+'</h2>\n\t\t\t\t\t<div class="project-sub-title">'+t.subTitle+'</div>\n\t\t\t\t</div>\n\t\t\t\t<div class="project-desc"> \n\t\t\t\t   <span>'+t.description+'</span> \n\t\t\t\t   <a class="read-review" data-count="'+o+'">'+r+" "+t.header+'</a> \n\t\t\t   </div>\n\t\t\t</div>\n\t\t</div> \n\t</div>\n\t<div class="project-review">\n\t\t<div class="review-close"></div> \n\t\t<div class="review" id="'+c+'">\n\t\t\t<div class="review-author">'+i+'</div>\n\t\t\t<div class="review-date">'+d+'</div>\n           <div class="review-stars">\n               <i class="icon-star-full"></i>\n               <i class="icon-star-full"></i>\n               <i class="icon-star-full"></i>\n               <i class="icon-star-full"></i>\n               <span></span>\n           </div>\n\t\t\t<div class="review-text">'+s+"</div>\n\t\t</div>\n\t</div>\n</div>"),4<l&&$("#project"+o).find(".review-stars > span").append('<i class="icon-star-full"></i>'),void 0!==n&&""!==s&&void 0!==s||$("#project"+o).find(".read-review").addClass("hidden"),$(".read-review").on("click",function(e){e.preventDefault();var t=$(this).attr("data-count");$("#project"+t).addClass("show-review").find(".project-review").addClass("show")}),$(".review-close").on("click",function(){$(this).parent().removeClass("show").parent(".project").removeClass("show-review")})})},error:function(e){chooseCookie()}}),$(document).on("click",".project-title",function(e){showModal(e,$(this))}),$(document).on("click",".project-overview-image",function(e){showModal(e,$(this))}),$(document).on("click",".modal-close",function(e){closeModal(e,$(this))}),$(document).on("click",".modal",function(e){e.target===this&&closeModal(e,$(this))})}});var testimonial=$("#google-reviews");function reviewSlider(){testimonial.removeClass("hidden"),testimonial.not(".slick-initialized").slick({slidesToShow:1,slidesToScroll:1,autoplay:!0,fade:!0,infinite:!0,autoplaySpeed:8e3,arrows:!0,responsive:[{breakpoint:1025,settings:{adaptiveHeight:!0}}]})}$(function(){$.ajax({url:"./assets/json/content.bin",scriptCharset:"utf-8",type:"GET",success:function(e){var t=JSON.parse(decodeURIComponent(escape(window.atob(e))))[getCookie("lang")].pages.projects;$.each(t,function(e,t){var a=t.review,o=a.author||"",n=a.description||"",i=a.date||"",s=o.replace(/[^A-Z0-9]+/gi,"-").toLowerCase(),d=a.stars||"",c=parseInt(e)+1;(a&&void 0!==a&&""!==n&&void 0!==n||""!==d&&void 0!==d)&&(testimonial.addClass("hidden"),0<testimonial.length&&(testimonial.append('<div class="review" id="'+s+c+'">\n               <div class="review-author">'+o+'</div>\n               <div class="review-date">'+i+'</div>\n               <div class="review-stars">\n                   <i class="icon-star-full"></i>\n                   <i class="icon-star-full"></i>\n                   <i class="icon-star-full"></i>\n                   <i class="icon-star-full"></i>\n                   <span></span>\n               </div>\n               <div class="review-text">'+a.description+"</div>\n            </div>"),4<d&&$(".review#"+s+c).find(".review-stars > span").append('<i class="icon-star-full"></i>')))}),setTimeout(function(){reviewSlider()},1e3)}})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,

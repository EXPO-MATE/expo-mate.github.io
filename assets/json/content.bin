{
    "nl": {
        "nav": {
            "labels": {
                "about": "Ons Verhaal",
                "foundation": "Ons Fundament",
                "mission": "Onze Missie &amp; Visie",
                "aboutUs": "Wie zijn wij",
                "method": "Onze Werkwijze",
                "process": "Full service Proces",
                "model": "Ons Expo-Mate Model",
                "comparision": "Van Design naar Realisatie",
                "values": "Onze Kernwaardes",
                "projects": "Projecten",
                "contact": "Contact"
            }
        },
        "pages": {
            "homepage": {
                "header": {
                    "content": {
                        "title": "Management in Authentic and Trending Exhibition Participations",
                        "backgroundImageSrc": "assets/images/mobile-bg.jpg",
                        "backgroundVideoMp4Src": "assets/video/expo-mate.mp4",
                        "backgroundVideoWebMSrc": "assets/video/expo-mate.webm",
                        "youtubeURL": "zxgIFrCk_uo"
                    }
                },
                "content": {
                    "intro": {
                        "title": "Ons Verhaal",
                        "description": "We geloven in de kracht van diversiteit. Diversiteit en het samenbrengen van verschillende disciplines zorgt er namelijk voor dat we iedere dag het beste resultaat voor, maar vooral met, onze klanten kunnen realiseren.",
                        "images": [
                            {
                                "src": "assets/images/brands/bo-logo.png",
                                "alt": "Borusan"
                            },
                            {
                                "src": "assets/images/brands/tomra.jpg",
                                "alt": "Tomra"
                            },
                            {
                                "src": "assets/images/brands/toshiba.jpg",
                                "alt": "Toshiba"
                            },
                            {
                                "src": "assets/images/brands/lamb.jpg",
                                "alt": "LambWeston"
                            },
                            {
                                "src": "assets/images/brands/strong.jpg",
                                "alt": "Strong TV"
                            }
                        ]
                    },
                    "about": {
                        "row1": {
                            "image": {
                                "src": "assets/images/1.jpg"
                            },
                            "title": "ONS FUNDAMENT",
                            "description": "10 jaar kennis en ervaring in de beursindustrie gecombineerd met 10 jaar sales en marketing ervaring vormt onze basis. Hierdoor kunnen wij als geen ander unieke beursconcepten bedenken die zorgen voor de hoogste return on investment."
                        },
                        "row2": {
                            "image": {
                                "src": "assets/images/2.jpg"
                            },
                            "title": "ONZE MISSIE & VISIE",
                            "description": "<p>De kapstok van EXPO-MATE. Alles wat we doen is afgeleid van ons bestaansrecht en onze droom; onze missie en visie.</p><p>Onze missie; Beursdeelnames succesvoller, effici&euml;nter en gemakkelijker maken. </p><p>Onze Visie; EXPO-MATE wil het meest gewaardeerde full service project management bureau zijn binnen de branche en marktleider op het gebied van kwaliteit. Het cre&euml;ren van authentieke, innovatieve en milieubewuste op maat gemaakte projecten zorgt ervoor dat onze klanten meer dan hun (beurs)doelstellingen bereiken. Door onze manier van werken zijn onze klanten niet alleen tevreden met het eindresultaat, maar ook met het totale proces dat daar naartoe leidt. Hierdoor zijn klanten niet langer klanten maar zijn het onze ambassadeurs.</p>"
                        }
                    },
                    "aboutUs": {
                        "title": "WIE ZIJN WIJ?",
                        "description": "",
                        "employees": {
                            "niek": {
                                "title": "Niek van Gent",
                                "description": "Door zelf als commercieel manager te hebben gewerkt begrijp ik als geen ander waar onze klanten behoeftes aan hebben. Iets waarvan ik merk dat het echt een meerwaarde is tijdens het designproces. Doordat ik zelf op de positie zat van mijn gesprekpartner kan ik me goed inleven in de behoeftes. De omzetting van organisatie naar een concreet concept samen met onze klanten is mijn grootste drijfveer! ",
                                "image": {
                                    "src": "assets/images/niek.jpg",
                                    "alt": "Niek van Gent"
                                }
                            },
                            "jan": {
                                "title": "Jan Maas",
                                "description": "Na 10 jaar werkzaam geweest te zijn als Project- en Accountmanager bij twee bedrijven binnen de beurzen industrie, ben ik van mening dat persoonlijke aandacht en echt luisteren naar de wensen van de klant het allerbelangrijkste is.Dit was de belangrijkste reden om EXPO-MATE te starten. Door de ervaring op commercieel ÃÂ©n technisch gebied kunnen we als volledig klankbord naar onze klanten acteren en hen tijdens het volledige proces ontzorgen. Gezamenlijk de (beurs) doelstellingen bereiken middels een prettige en persoonlijke samenwerking is waar ik voor sta!",
                                "image": {
                                    "src": "assets/images/jan.jpg",
                                    "alt": "Jan Maas"
                                }
                            }
                        }
                    },
                    "values": {
                        "title": "ONZE KERNWAARDES",
                        "description": "Of we een adviesgesprek voeren, een ontwerp presenteren, of de uiteindelijke stand opleveren, alles wat we doen is gebaseerd op onze kernwaardes welke hieronder zijn weergegeven.",
                        "image": {
                            "src": "assets/images/wall.jpg"
                        },
                        "values": {
                            "value1": "De Hoogste Kwaliteit",
                            "value2": "Full Service",
                            "value3": "Innovatief & Authentiek",
                            "value4": "Onafhankelijkheid",
                            "value5": "Duurzaam",
                            "value6": "Operational Excellence"
                        }
                    },
                    "method": {
                        "title": "ONZE WERKWIJZE",
                        "hoverLabel": "Beweeg met uw muis over de bollen voor meer informatie.",
                        "description": "Totale ontzorging. Minder vinden we niet goed genoeg voor onze relaties. Door onze verschillende achtergronden en ervaringen hebben we een werkwijze kunnen ontwikkelen die uniek is in de branche en welke ons in staat stelt de hoogst mogelijke return on investment voor onze relaties te behalen.",
                        "method": {
                            "intro": {
                                "title": "Introductie",
                                "description": "Een persoonlijke kennismaking waarbij de behoeftes, wensen en doelen worden besproken."
                            },
                            "design": {
                                "title": "Design",
                                "description": "Op basis van uw input aangevuld met de uitkomst van het 'EXPO-MATE model' maken we een authentiek en innovatief op maat ontworpen beursconcept."
                            },
                            "tuning": {
                                "title": "Fine tunen",
                                "description": "Gezamenlijk wordt het ontwerp besproken en eventueel aangepast om tot het optimale definitieve ontwerp te komen."
                            },
                            "construction": {
                                "title": "Technische voorbereiding en realisatie",
                                "description": "Wij verzorgen de volledige technische voorbereiding en opbouw van de stand. Vanzelfsprekend zijn we als uw samenwerkingspartnerpartner bij de opbouw aanwezig en zijn we uw aanspreekpunt op de beursvloer."
                            },
                            "eval": {
                                "title": "Evaluatie",
                                "description": "Na afloop bespreken we altijd het project om te zien of doelstellingen zijn behaald, de stand naar tevredenheid is geweest en of er eventuele verbeterpunten zijn voor het eerstvolgende project."
                            }
                        }
                    },
                    "model": {
                        "image": {
                            "src": "assets/images/model.jpg"
                        },
                        "title": "Het EXPO-MATE model: van introductie naar design",
                        "description": "In onze optiek de belangrijkste stap in het gehele proces. Door tijd te investeren en kennis te delen in het begin van het proces, hoeven er geen aannames te worden gedaan bij het ontwerp van het concept, maar gaat om datgene wat telt: Integreren van uw identiteit, wensen en behoeftes als beursdeelnemer. EXPO-MATE heeft een eigen -uniek- model ontwikkeld dat ons in staat stelt om de belangrijkste organisatie kenmerken/waardes en identiteit concreet te verwerken in het ontwerpvoorstel. Wij geloven erin dat alleen dan de hoogste return on investment kan worden behaald. We komen dit model graag gedetailleerd uitleggen en gezamenlijk in de praktijk brengen."
                    },
                    "projects": {
                        "tile": "ONZE PROJECTEN",
                        "description": "Innovatief en authentiek. Dat zijn de sleutelwoorden van onze ontwerpen. Iedere stand is custom made ontworpen en gebouwd conform de hoogste kwaliteitsnormen. Bekijk hier enkele voorbeelden van door ons ontworpen en gerealiseerde stands. Benieuwd naar wat we voor uw organisatie kunnen betekenen? Neem dan gerust contact met ons op!",
                        "reviewLink": "Bekijk hier de review van",
                        "button": {
                            "label": "Onze Projecten"
                        },
                        "project1": {
                            "title": "Borusan Mannesmann",
                            "button": "Bekijk",
                            "image": {
                                "src": "assets/images/projects/borusan/1.jpg",
                                "alt": "Borusan"
                            }
                        },
                        "project2": {
                            "title": "Toshiba",
                            "button": "Bekijk",
                            "image": {
                                "src": "assets/images/projects/toshiba/1.jpg",
                                "alt": "Toshiba"
                            }
                        }
                    },
                    "comparison": {
                        "title": "Van design naar realisatie",
                        "description": "Vanaf de eerste schetsen wordt er nagedacht dat het uiteindelijke design ook perfect omgezet moet worden in realiteit. Bekijk hieronder enkele voorbeelden van ontwerpen en het eindresultaat",
                        "comparisons": [
                            {
                                "before": "assets/images/comparison/borusan/slider-before.jpg",
                                "after": "assets/images/comparison/borusan/slider-after.jpg"
                            },
                            {
                                "before": "assets/images/comparison/toshiba/slider-before.jpg",
                                "after": "assets/images/comparison/toshiba/slider-after.jpg"
                            },
                            {
                                "before": "assets/images/comparison/lamb/slider-before.jpg",
                                "after": "assets/images/comparison/lamb/slider-after.jpg"
                            },
                            {
                                "before": "assets/images/comparison/zwan/slider-before.jpg",
                                "after": "assets/images/comparison/zwan/slider-after.jpg"
                            }
                        ]
                    }
                },
                "footer": {
                    "testimonials": {
                        "title": "Testimonials"
                    },
                    "contacts": {
                        "header": "Mail Ons",
                        "jan": {
                            "title": "Jan Maas",
                            "links": {
                                "email": {
                                    "title": "j.maas@expo-mate.com",
                                    "src": "mailto:j.maas@expo-mate.com",
                                    "alt": "Email Jan"
                                },
                                "linkedin": {
                                    "title": "Jan op",
                                    "src": "https://nl.linkedin.com/in/maasjan",
                                    "alt": "Jan On LinkedIn"
                                }
                            },
                            "phone": "+31 6 50 28 18 91"
                        },
                        "niek": {
                            "title": "Niek van Gent",
                            "links": {
                                "email": {
                                    "title": "n.van.gent@expo-mate.com",
                                    "src": "mailto:n.van.gent@expo-mate.com"
                                },
                                "linkedin": {
                                    "title": "Niek op",
                                    "src": "https://nl.linkedin.com/in/niek-van-gent-b538781b"
                                }
                            },
                            "phone": "+31 6 50 28 18 91"
                        }
                    },
                    "phone": {
                        "header": "Bel Ons"
                    },
                    "visit": {
                        "header": "Bezoek Ons",
                        "description": "Garnizoenweg 3 <br/> Gebouw A <br/> Postbus 8064 <br/> 5928 NA Venlo <br/> Nederland"
                    },
                    "copyright": {
                        "description": "Copyright 2018, Expo-Mate - None of the Images on the website are owned or affiliated with Expo-mate and are copyrighted by their respectful owners."
                    }
                }
            },
            "projects": [
                {
                    "title": "Borusan Mannesmann",
                    "subTitle": "TUBE 2018 D&uuml;sseldorf",
                    "description": "Ontwikkelen van een beurs concept waarin Borusan Mannesmann de belangrijkste klanten kan ontvangen tijdens het 60 jarige bestaan. Prestige om het mooiste concept neer te zetten waarin bezoekers comfortabel wat kunnen eten en drinken. ",
                    "images": [
                        {
                            "src": "assets/images/projects/borusan/1.jpg",
                            "alt": "Borusan Mannesmann"
                        },
                        {
                            "src": "assets/images/projects/borusan/2.jpg",
                            "alt": "Borusan Mannesmann"
                        },
                        {
                            "src": "assets/images/projects/borusan/3.jpg",
                            "alt": "Borusan Mannesmann"
                        },
                        {
                            "src": "assets/images/projects/borusan/4.jpg",
                            "alt": "Borusan Mannesmann"
                        },
                        {
                            "src": "assets/images/projects/borusan/5.jpg",
                            "alt": "Borusan Mannesmann"
                        },
                        {
                            "src": "assets/images/projects/borusan/6.jpg",
                            "alt": "Borusan"
                        },
                        {
                            "src": "assets/images/projects/borusan/7.jpg",
                            "alt": "Borusan Mannesmann"
                        },
                        {
                            "src": "assets/images/projects/borusan/8.jpg",
                            "alt": "Borusan Mannesmann"
                        },
                        {
                            "src": "assets/images/projects/borusan/9.jpg",
                            "alt": "Borusan Mannesmann"
                        }
                    ],
                    "review": {
                        "author": "Borusan Mannesmann",
                        "date": "6 maart, 2018",
                        "stars": 5,
                        "description": "We zijn helemaal tevreden met het werken met EXPO-MATE voor de Tube 2018 in DÃÂ¼sseldorf. Hun timingplan was prima, communicatie is altijd perfect, alle geleverde materialen zoals besproken. Wanneer we tijdens de tentoonstelling iets wilden veranderen, regelde Jan en zijn team het direct. We hebben zeer positieve feedback ontvangen van onze klanten die ons op de Tube 2018 hebben bezocht. Al met al kan ik zeggen dat EXPO-MATE een heel goed bedrijf is. Wanneer je de professionele visie of de eigentijdse mening van EXPO-MATE wilt, zullen zij deze met je delen."
                    }
                },
                {
                    "title": "Toshiba Business Display Solutions",
                    "subTitle": "ISE Amsterdam 2018",
                    "description": "De uitdaging waar Toshiba voor stond was om de vele producten en diverse business units overzichtelijk te presenteren.",
                    "images": [
                        {
                            "src": "assets/images/projects/toshiba/1.jpg",
                            "alt": "Toshiba"
                        },
                        {
                            "src": "assets/images/projects/toshiba/2.jpg",
                            "alt": "Toshiba"
                        },
                        {
                            "src": "assets/images/projects/toshiba/3.jpg",
                            "alt": "Toshiba"
                        },
                        {
                            "src": "assets/images/projects/toshiba/4.jpg",
                            "alt": "Toshiba"
                        },
                        {
                            "src": "assets/images/projects/toshiba/5.jpg",
                            "alt": "Toshiba"
                        },
                        {
                            "src": "assets/images/projects/toshiba/6.jpg",
                            "alt": "Toshiba"
                        },
                        {
                            "src": "assets/images/projects/toshiba/7.jpg",
                            "alt": "Toshiba"
                        }
                    ],
                    "review": {
                        "author": "Toshiba Business Display Solutions",
                        "date": "12 maart, 2018",
                        "stars": 5,
                        "description": "Het was een genoegen om met EXPO-MATE te werken vanaf de vroege planningsfase tot en met de uitvoering tijdens het evenement. Alles was moeiteloos en goed doordacht, communicatief en vriendelijk team. We waren zeer tevreden met het eindresultaat en kregen veel positieve feedback over de stand van Toshiba Business Display Solutions op ISE 2018, Amsterdam. We zien er naar uit om in de toekomst weer met je samen te werken, nogmaals bedankt, EXPO-MATE."
                    }
                },
                {
                    "title": "Lamb Weston/Meijer",
                    "subTitle": "Casual Dining Show London 2018",
                    "description": "CreÃÂ«er een concept waarmee we laten zien dat we de key spelers in de Engelse markt begrijpen. Dit is het groeiende pub segment in de UK. Hoe kan men dat beter doen dan door de LambWeston pub te ontwerpen?",
                    "images": [
                        {
                            "src": "assets/images/projects/lamb/1.jpg",
                            "alt": "Lamb Weston/Meijer"
                        },
                        {
                            "src": "assets/images/projects/lamb/2.jpg",
                            "alt": "Lamb Weston/Meijer"
                        },
                        {
                            "src": "assets/images/projects/lamb/3.jpg",
                            "alt": "Lamb Weston/Meijer"
                        },
                        {
                            "src": "assets/images/projects/lamb/4.jpg",
                            "alt": "Lamb Weston/Meijer"
                        },
                        {
                            "src": "assets/images/projects/lamb/5.jpg",
                            "alt": "Lamb Weston/Meijer"
                        },
                        {
                            "src": "assets/images/projects/lamb/6.jpg",
                            "alt": "Lamb Weston/Meijer"
                        },
                        {
                            "src": "assets/images/projects/lamb/7.jpg",
                            "alt": "Lamb Weston/Meijer"
                        }
                    ],
                    "review": {
                        "author": "Lamb Weston Meijer",
                        "date": "6 maart, 2018",
                        "stars": 5,
                        "description": ""
                    }
                },
                {
                    "title": "WvanderZwan",
                    "subTitle": "Seafood Expo Global Brussel 2018",
                    "description": "Omzetting van het bestaande concept in een hoogwaardige stand waarbij de bezoekers ook de mogelijkheid wordt geboden om op de bovenverdieping plaats te nemen in de lounge. Klanten kleine hapjes en drankjes aan te bieden in een ongedwongen sfeer.",
                    "images": [
                        {
                            "src": "assets/images/projects/zwan/1.jpg",
                            "alt": "WvanderZwan"
                        },
                        {
                            "src": "assets/images/projects/zwan/2.jpg",
                            "alt": "WvanderZwan"
                        },
                        {
                            "src": "assets/images/projects/zwan/3.jpg",
                            "alt": "WvanderZwan"
                        },
                        {
                            "src": "assets/images/projects/zwan/4.jpg",
                            "alt": "WvanderZwan"
                        },
                        {
                            "src": "assets/images/projects/zwan/5.jpg",
                            "alt": "WvanderZwan"
                        },
                        {
                            "src": "assets/images/projects/zwan/6.jpg",
                            "alt": "WvanderZwan"
                        }
                    ],
                    "review": {
                        "author": "WvanderZwan",
                        "date": "12 maart, 2018",
                        "stars": 5,
                        "description": "Mede door onze prachtig opgeleverde stand op SEG 2018 in Brussel, hebben wij een geweldige beurs beleefd. Afspraken werden nagekomen en de service van EXPO-MATE is van hoogstaande kwaliteit! Namens W. van der Zwan en Zonen BV kunnen wij iedereen Expo-Mate aanraden als partner!"
                    }
                },
                {
                    "title": "Tomra Food Sorting NV",
                    "subTitle": "Programma 2018",
                    "description": "Standing out from the rest, clean & stopping power wilde Tomra graag terug zien. Vanwege het programma met verschillende afmetingen en locaties moeten materialen zoveel mogelijk herbruikbaar zijn. Zodoende kan hier kosten efficient mee omgegaan worden.",
                    "images": [
                        {
                            "src": "assets/images/projects/tomra/tom-1.jpg",
                            "alt": "Tomra Food Sorting NV"
                        },
                        {
                            "src": "assets/images/projects/tomra/2.jpg",
                            "alt": "Tomra Food Sorting NV"
                        },
                        {
                            "src": "assets/images/projects/tomra/3.jpg",
                            "alt": "Tomra Food Sorting NV"
                        },
                        {
                            "src": "assets/images/projects/tomra/4.jpg",
                            "alt": "Tomra Food Sorting NV"
                        },
                        {
                            "src": "assets/images/projects/tomra/5.jpg",
                            "alt": "Tomra Food Sorting NV"
                        },
                        {
                            "src": "assets/images/projects/tomra/6.jpg",
                            "alt": "Tomra Food Sorting NV"
                        },
                        {
                            "src": "assets/images/projects/tomra/7.jpg",
                            "alt": "Tomra Food Sorting NV"
                        }
                    ],
                    "review": {
                        "author": "Tomra Food Sorting NV",
                        "date": "6 maart, 2018",
                        "stars": 5,
                        "description": "Het was een genoegen om met het EXPO-MATE team samen te werken voor de Fruit Logistica-beurs in Berlijn. Van de ontwerpfase tot het eindresultaat op de show, het team hielp ons onze ideeÃÂ«n te realiseren. Ze stelden een creatief ontwerp voor, een gedetailleerd kostenoverzicht en de uitrol van het goedgekeurde plan was goed. De stand zag er uiterst professioneel uit, gaf ons bij TOMRA goede bekendheid en branding. Wat ik het leukst vond, is de persoonlijke en nauwe follow-up. Als er iets is dat niet klopt (en zoals we allemaal weten, gebeuren deze dingen tijdens een tentoonstelling :-)), was het team daar om een oplossing te bedenken."
                    }
                },
                {
                    "title": "Aluminium Verkoop Zuid BV (AVZ)",
                    "subTitle": "R+T Stuttgart 2018",
                    "description": "AVZ wilde graag een open en toegankelijke stand die hen de mogelijkheid gaf op de grootste beurs binnen hun vakgebied zowel de nieuwe huisstijl te presenteren alsmede de belangrijkste producten tentoon te stellen. ",
                    "images": [
                        {
                            "src": "assets/images/projects/avz/1.jpg",
                            "alt": "AVZ"
                        },
                        {
                            "src": "assets/images/projects/avz/2.jpg",
                            "alt": "AVZ"
                        },
                        {
                            "src": "assets/images/projects/avz/3.jpg",
                            "alt": "AVZ"
                        },
                        {
                            "src": "assets/images/projects/avz/4.jpg",
                            "alt": "AVZ"
                        },
                        {
                            "src": "assets/images/projects/avz/5.jpg",
                            "alt": "AVZ"
                        }
                    ],
                    "review": {
                        "author": "Aluminium Verkoop Zuid BV",
                        "date": "12 maart, 2018",
                        "stars": 5,
                        "description": "De samenwerking met EXPO-MATE verliep vlekkeloos. Alle afspraken zijn goed nagekomen. Ondanks de vele aanpassingen vanuit onze kant, zag de stand er geweldig uit, werd het op tijd opgeleverd en zag de stand er in werkelijkheid hetzelfde uit zoals het ontwerp. Bedankt EXPO-MATE!"
                    }
                },
                {
                    "title": "The Scelta Institute BV",
                    "subTitle": "Anuga Keulen, Sial Parijs en FIE Frankfurt",
                    "description": "Men wilde een nieuwe stand die voor alle beurzen modulair te bouwen is. Dezelfde look en feel waarbij hun producten worden gepresenteerd, zowel grafisch als door middel van live cooking. ",
                    "images": [
                        {
                            "src": "assets/images/projects/scelta/1.jpg",
                            "alt": "The Scelta Institute BV"
                        },
                        {
                            "src": "assets/images/projects/scelta/2.jpg",
                            "alt": "The Scelta Institute BV"
                        },
                        {
                            "src": "assets/images/projects/scelta/3.jpg",
                            "alt": "The Scelta Institute BV"
                        },
                        {
                            "src": "assets/images/projects/scelta/4.jpg",
                            "alt": "The Scelta Institute BV"
                        },
                        {
                            "src": "assets/images/projects/scelta/5.jpg",
                            "alt": "The Scelta Institute BV"
                        }
                    ],
                    "review": {
                        "author": "The Scelta Institute BV",
                        "date": "6 maart, 2018",
                        "stars": 5,
                        "description": "Zeer tevreden over de succesvolle realisatie van onze nieuwe stand en de betrouwbare begeleiding richting onze deelname aan de SIAL in 2016. Er werd goed meegedacht om van idee en tekening tot een succesvolle beursdeelname te komen."
                    }
                },
                {
                    "title": "Strong TV",
                    "subTitle": "ANGA Keulen, IFA Berlijn",
                    "description": "Het presenteren van WiFi producten maar ook de tv's op 1 stand waarbij de klanten de mogelijkheid wordt geboden om een priv&eacute; gesprek te kunnen voeren in de meeting ruimtes of een informele kop koffie aan de bar. Producten voeren de boventoon op de technische beurzen waar ze aan deelnemen.",
                    "images": [
                        {
                            "src": "assets/images/projects/strong/1.jpg",
                            "alt": "Strong TV"
                        },
                        {
                            "src": "assets/images/projects/strong/2.jpg",
                            "alt": "Strong TV"
                        },
                        {
                            "src": "assets/images/projects/strong/3.jpg",
                            "alt": "Strong TV"
                        },
                        {
                            "src": "assets/images/projects/strong/4.jpg",
                            "alt": "Strong TV"
                        },
                        {
                            "src": "assets/images/projects/strong/5.jpg",
                            "alt": "Strong TV"
                        }
                    ],
                    "review": {
                        "author": "Strong TV",
                        "date": "12 maart, 2018",
                        "stars": 5,
                        "description": "Zeer professioneel, vriendelijk en behulpzaam standbouwer uit Nederland.<br/><br/> De stand werd volledig opgebouwd op de dag van aankomst en alle installaties waren gedaan. Kleine last-minute wijzigingen, waren geen enkel probleem. Ook de communicatie met het team was makkelijk (Engels / Duits / Nederlands) en het team was zeer behulpzaam. Oprichter, de heer Jan Maas bleef tot het einde van de eerste dag van de tentoonstelling en zorgde ervoor dat alles in orde was. We raden EXPO-MATE zeker aan voor elke tentoonstelling.<br/><br/> Onze stand was voor de ANGA COM 2017 in Keulen en we zullen zeker weer de samenwerking aangaan voor komende tentoonstellingen."
                    }
                },
                {
                    "title": "Frankort & Koning BV",
                    "subTitle": "Fruit Logistica Berlijn 2017-2019",
                    "description": "De jaarlijkse fruitbeurs in Berlijn biedt Frankort & Koning de mogelijkheid om leveranciers en klanten over de hele wereld te ontmoeten. Een laagdrempelige stand waarbij hospitality hoog in het vaandel staat was het uitgangspunt. ",
                    "images": [
                        {
                            "src": "assets/images/projects/frankfort/1.jpg",
                            "alt": "Frankort & Koning BV"
                        },
                        {
                            "src": "assets/images/projects/frankfort/2.jpg",
                            "alt": "Frankort & Koning BV"
                        },
                        {
                            "src": "assets/images/projects/frankfort/3.jpg",
                            "alt": "Frankort & Koning BV"
                        },
                        {
                            "src": "assets/images/projects/frankfort/4.jpg",
                            "alt": "Frankort & Koning BV"
                        }
                    ],
                    "review": {
                        "author": "Frankort & Koning BV",
                        "date": "6 maart, 2018",
                        "stars": 5,
                        "description": "Een zeer professionele maar ook persoonlijke samenwerking met EXPO-MATE voor onze stand op de Fruit Logistica in Berlijn. Afspraken zijn nagekomen, werkelijkheid was zoals het ontwerp. Met een paar aanpassingen zijn we weer klaar voor editie 2018! Frankort & Koning BV"
                    }
                }
            ]
        }
    },
    "de": {
        "nav": {
            "labels": {
                "about": "Unsere Geschichte",
                "foundation": "Unser Fundament",
                "mission": "Unsere Mission und Vision",
                "aboutUs": "Wer wir sind",
                "method": "UNSERE ARBEITSWEISE",
                "process": "Full service Proces",
                "model": "Unser EXPO-MATE Modell",
                "comparision": "Von der EinfÃ¼hrung bis zum Design",
                "values": "Unsere Unternehmenswerte",
                "projects": "Projekte",
                "contact": "Kontakt"
            }
        },
        "pages": {
            "homepage": {
                "header": {
                    "content": {
                        "title": "Management in Authentic and Trending Exhibition Participations",
                        "backgroundImageSrc": "assets/images/mobile-bg.jpg",
                        "backgroundVideoMp4Src": "assets/video/expo-mate.mp4",
                        "backgroundVideoWebMSrc": "assets/video/expo-mate.webm",
                        "youtubeURL": "zxgIFrCk_uo"
                    }
                },
                "content": {
                    "intro": {
                        "title": "Unsere Geschichte",
                        "description": "Wir glauben in die Kraft von DiversitÃ¤t. DiversitÃ¤t und das Zusammenspiel von verschiedenen Disziplinen sorgen dafÃ¼r, dass wir jeden Tag das beste Resultat fÃÂ¼r, aber vor allem mit unseren Kunden realisieren kÃÂ¶nnen.  ",
                        "images": [
                            {
                                "src": "assets/images/brands/bo-logo.png",
                                "alt": "Borusan"
                            },
                            {
                                "src": "assets/images/brands/tomra.jpg",
                                "alt": "Tomra"
                            },
                            {
                                "src": "assets/images/brands/toshiba.jpg",
                                "alt": "Toshiba"
                            },
                            {
                                "src": "assets/images/brands/lamb.jpg",
                                "alt": "LambWeston"
                            },
                            {
                                "src": "assets/images/brands/strong.jpg",
                                "alt": "Strong TV"
                            }
                        ]
                    },
                    "about": {
                        "row1": {
                            "image": {
                                "src": "assets/images/1.jpg"
                            },
                            "title": "Unser Fundament",
                            "description": "10 Jahre Wissen und Erfahrung in der GeschÃÂ¤ftswelt der Messen, kombiniert mit 10 Jahren Verkauf und Marketing Erfahrung ist unsere Basis. Dadurch kÃÂ¶nnen wir wie kein anderer einzigartige Messestandkonzepte entwerfen, die fÃÂ¼r einen mÃÂ¶glichst hohen Return of Investment sorgen."
                        },
                        "row2": {
                            "image": {
                                "src": "assets/images/2.jpg"
                            },
                            "title": "Unsere Mission und Vision",
                            "description": "<p>Die Basis von EXPO-MATE. Alles was wir machen baut auf unserer Mission und Vision auf.</p><p>Unsere Mission; Ihre Messeteilnahme erfolgreicher, effizienter und einfacher zu gestalten. </p><p>Unsere Vision; EXPO MATE strebt die MarktfÃÂ¼hrung als Full-Service Dienstleister an, weil wir authentische, innovative, maÃÂgeschneiderte, nachhaltige und zielorientierte Konzepte fÃÂ¼r unsere Auftraggeber anbieten. Durch unsere Arbeit sind unsere Kunden nicht nur zufrieden mit dem Resultat unserer Arbeit, sondern auch mit dem Prozess, der zum dem finalen Ergebnis fÃÂ¼hrt. Dadurch sind unsere Kunden nicht nur Kunden, sondern auch unsere ReprÃÂ¤sentanten.</p>"
                        }
                    },
                    "aboutUs": {
                        "title": "Wer wir sind?",
                        "description": "",
                        "employees": {
                            "niek": {
                                "title": "Niek van Gent",
                                "description": "Aufgrund meiner Erfahrung als kommerzieller Manager verstehe ich schnell, welche BedÃÂ¼rfnisse unsere Kunden haben. Das ist wÃÂ¤hrend des Designprozesses ein echter Mehrwert. Da ich selber lange in der Position meiner GesprÃÂ¤chspartner war, kann ich mich in die BedÃÂ¼rfnisse wirklich gut eindenken. Die Umsetzung vom Unternehmen zum konkreten Konzept zusammen mit unseren Kunden ist einer meiner wichtigsten Motive!  ",
                                "image": {
                                    "src": "assets/images/niek.jpg",
                                    "alt": "Niek van Gent"
                                }
                            },
                            "jan": {
                                "title": "Jan Maas",
                                "description": "Nachdem ich zehn Jahre in zwei verschiedenen Betrieben der Messe-Industrie als Projekt- und Accountmanager gearbeitet habe, habe ich festgestellt, dass die wichtigsten Punkte in der Zusammenarbeit mit unseren Kunden die Aufmerksamkeit und das Beachten der WÃÂ¼nsche der Kunden sind.  Daraufhin habe ich EXPO-MATE aufgebaut. Mit unserer Erfahrung auf kommerzieller und technischer Ebene kÃÂ¶nnen wir mit als absolute Profis in Richtung unserer Kunden auftreten und diese wÃÂ¤hrend des vollstÃÂ¤ndigen Prozesses versorgen. Zusammen die (Messe) Ziele zu erreichen mithilfe einer guten und persÃÂ¶nlichen Zusammenarbeit: dafÃÂ¼r stehe ich! ",
                                "image": {
                                    "src": "assets/images/jan.jpg",
                                    "alt": "Jan Maas"
                                }
                            }
                        }
                    },
                    "values": {
                        "title": "Unsere Unternehmenswerte",
                        "description": "EXPO-MATEÃ¢ÂÂs Eigenschaften sind die Grundvoraussetzungen fÃÂ¼r alle unsere Handlungen. Von der gemeinsamen Erarbeitung der Messe-Konzepte bis hin zur schlÃÂ¼sselfertigen MessestandÃÂ¼bergabe, begleiten wir Sie professionell und kompetent.",
                        "image": {
                            "src": "assets/images/wall.jpg"
                        },
                        "values": {
                            "value1": "Beste QualitÃ¤t",
                            "value2": "Umweltfreundlich",
                            "value3": "Authentisch, Modern & Innovativ",
                            "value4": "UnabhÃ¤ngig",
                            "value5": "Wirtschaftlich",
                            "value6": "Langfristige Kundenbeziehungen"
                        }
                    },
                    "method": {
                        "title": "UNSERE ARBEITSWEISE",
                        "hoverLabel": "Bewegen Sie die Maus Ã¼ber die GlÃ¼hbirnen fÃ¼r weitere Informationen. ",
                        "description": "Totale Entlastung. Weniger als das finden wir nicht gut genug fÃ¼r unsere Kunden. Durch unsere Erfahrungen in den verschiedensten Berufen haben wir eine fÃ¼r diese Branche einzigartige Arbeitsweise entwickeln kÃ¶nnen. Diese ermÃ¶glicht es uns, fÃ¼r unsere Kunden einen hohen Return of Investment zu erreichen.",
                        "method": {
                            "intro": {
                                "title": "EinfÃ¤hrung:",
                                "description": "InformationsgesprÃ¤ch zur Dokumentation von Anforderungen, WÃ¼nschen und Zielen"
                            },
                            "design": {
                                "title": "Design",
                                "description": "Auf Basis Ihrer WÃ¼nsche und unseres EXPO-MATE Modells entwerfen wir ein authentisches und innovatives Messekonzept nach MaÃ."
                            },
                            "tuning": {
                                "title": "Feinabstimmung",
                                "description": "Gemeinsame Abstimmungen und Anpassungen der EntwÃÂ¼rfe, um letzten Endes zu einem optimalen definitivem Entwurf zu kommen."
                            },
                            "construction": {
                                "title": "Technische Vorbereitungen und Realisation",
                                "description": "Wir kÃÂ¼mmern uns vollstÃÂ¤ndig um die technischen Vorbereitungen und um den Aufbau des Standes. SelbstverstÃÂ¤ndlich sind wir als Ihre Partner beim Aufbau des Standes auf dem AusstellungsgelÃÂ¤nde anwesend. Unsere Partner sind Profis, die sich QualitÃÂ¤t ganz oben auf Ihre Fahne schreiben. Weiterhin sind wir flexibel und arbeiten lÃÂ¶sungsorientiert."
                            },
                            "eval": {
                                "title": "Auswertung",
                                "description": "Nachdem die Messe vorbei ist, besprechen wir immer noch mal das ganze Projekt. Damit wollen wir sicher gehen, ob alle Zielstellungen tatsÃÂ¤chlich erreicht wurden, der Stand zur Zufriedenheit war und ob es eventuelle Verbesserungspunkte fÃÂ¼r ein folgendes Projekt gibt. "
                            }
                        }
                    },
                    "model": {
                        "image": {
                            "src": "assets/images/model.jpg"
                        },
                        "title": "EXPO-MATE Modell - Von der EinfÃ¼hrung bis zum Design",
                        "description": "Unserer Meinung nach ist dies wohl der wichtigste Schritt im ganzen Prozess. Es ist uns ein groÃÂes Anliegen Ihren Vorstellungen und BedÃÂ¼rfnissen als Kunde gerecht zu werden und das richtige GespÃÂ¼r fÃÂ¼r diese zu entwickeln. DafÃÂ¼r ist es wichtig am Anfang des Projektes Zeit fÃÂ¼r einen gemeinsamen Informationsaustausch zu investieren.<br/><br/>Ein Messestand muss unverwechselbar sein, der Corporate Identity und Markenstrategie entsprechen; fÃÂ¼r die Umsetzung hat EXPO-MATE ein eigenes Modell entwickelt. Durch dieses Modell bekommen unsere Kunden das hÃÂ¶chste Return on Investment.<br/><br/>Gerne erlÃÂ¤utern wir Ihnen das EXPO-MATE Modell ausfÃÂ¼hrlich. Wir stellen Ihnen als unseren potenziellen GeschÃÂ¤ftspartner vor, wie wir die von Ihrem Unternehmen gewÃÂ¼nschten Informationen in einer 3D Visualisierung auf der Messe umsetzen wÃÂ¼rden."
                    },
                    "projects": {
                        "tile": "Unsere Projekte",
                        "description": "Innovativ und authentisch. Das sind die SchlÃÂ¼sselworte von unseren EntwÃÂ¼rfen. Jeder Stand ist eine qualitativ sehr hochwertige MaÃÂanfertigung. Sehen Sie sich hier einige Beispiele von durch uns entworfene und realisierte StÃÂ¤nde an. Neugierig auf was wir fÃÂ¼r Ihr Unternehmen erreichen kÃÂ¶nnten? Dann nehmen Sie gerne Kontakt mit uns auf!",
                        "reviewLink": "Bekijk hier de review van",
                        "button": {
                            "label": "Unsere Projekte"
                        },
                        "project1": {
                            "title": "Borusan Mannesmann",
                            "button": "Bekijk",
                            "image": {
                                "src": "assets/images/projects/borusan/1.jpg",
                                "alt": "Borusan"
                            }
                        },
                        "project2": {
                            "title": "Toshiba",
                            "button": "Bekijk",
                            "image": {
                                "src": "assets/images/projects/toshiba/1.jpg",
                                "alt": "Toshiba"
                            }
                        }
                    },
                    "comparison": {
                        "title": "Von Design bis zur Realization",
                        "description": "Von den ersten Skizze wird angenommen, dass das endgÃ¼ltige Design auch perfekt in die RealitÃ¤t umgesetzt werden muss. Sehen Sie sich einige Beispiele von Designs und das Endergebnis unten an",
                        "comparisons": [
                            {
                                "before": "assets/images/comparison/borusan/slider-before.jpg",
                                "after": "assets/images/comparison/borusan/slider-after.jpg"
                            },
                            {
                                "before": "assets/images/comparison/toshiba/slider-before.jpg",
                                "after": "assets/images/comparison/toshiba/slider-after.jpg"
                            },
                            {
                                "before": "assets/images/comparison/lamb/slider-before.jpg",
                                "after": "assets/images/comparison/lamb/slider-after.jpg"
                            },
                            {
                                "before": "assets/images/comparison/zwan/slider-before.jpg",
                                "after": "assets/images/comparison/zwan/slider-after.jpg"
                            }
                        ]
                    }
                },
                "footer": {
                    "testimonials": {
                        "title": "Testimonials"
                    },
                    "contacts": {
                        "header": "E-Mailen Sie uns",
                        "jan": {
                            "title": "Jan Maas",
                            "links": {
                                "email": {
                                    "title": "j.maas@expo-mate.com",
                                    "src": "mailto:j.maas@expo-mate.com",
                                    "alt": "Email Jan"
                                },
                                "linkedin": {
                                    "title": "Jan auf",
                                    "src": "https://nl.linkedin.com/in/maasjan",
                                    "alt": "Jan auf LinkedIn"
                                }
                            },
                            "phone": "+31 6 50 28 18 91"
                        },
                        "niek": {
                            "title": "Niek van Gent",
                            "links": {
                                "email": {
                                    "title": "n.van.gent@expo-mate.com",
                                    "src": "mailto:n.van.gent@expo-mate.com"
                                },
                                "linkedin": {
                                    "title": "Niek auf",
                                    "src": "https://nl.linkedin.com/in/niek-van-gent-b538781b"
                                }
                            },
                            "phone": "+31 6 50 28 18 91"
                        }
                    },
                    "phone": {
                        "header": "Rufen Sie uns an"
                    },
                    "visit": {
                        "header": "Besuchen Sie uns",
                        "description": "Garnizoenweg 3 <br/> Building A <br/> Postbus 8064 <br/> 5928 NA Venlo <br/> NiederlÃ¤nde"
                    },
                    "copyright": {
                        "description": "Copyright 2018, Expo-Mate - Alle rechten voorbehouden."
                    }
                }
            },
            "projects": [
                {
                    "title": "Borusan Mannesmann",
                    "subTitle": "TUBE 2018 DÃÂ¼sseldorf",
                    "description": "Ontwikkelen van een beurs concept waarin Borusan Mannesmann de belangrijkste klanten kan ontvangen tijdens het 60 jarige bestaan. Prestige om het mooiste concept neer te zetten waarin bezoekers comfortabel wat kunnen eten en drinken. ",
                    "images": [
                        {
                            "src": "assets/images/projects/borusan/1.jpg",
                            "alt": "Borusan Mannesmann"
                        },
                        {
                            "src": "assets/images/projects/borusan/2.jpg",
                            "alt": "Borusan Mannesmann"
                        },
                        {
                            "src": "assets/images/projects/borusan/3.jpg",
                            "alt": "Borusan Mannesmann"
                        },
                        {
                            "src": "assets/images/projects/borusan/4.jpg",
                            "alt": "Borusan Mannesmann"
                        },
                        {
                            "src": "assets/images/projects/borusan/5.jpg",
                            "alt": "Borusan Mannesmann"
                        },
                        {
                            "src": "assets/images/projects/borusan/6.jpg",
                            "alt": "Borusan"
                        },
                        {
                            "src": "assets/images/projects/borusan/7.jpg",
                            "alt": "Borusan Mannesmann"
                        },
                        {
                            "src": "assets/images/projects/borusan/8.jpg",
                            "alt": "Borusan Mannesmann"
                        },
                        {
                            "src": "assets/images/projects/borusan/9.jpg",
                            "alt": "Borusan Mannesmann"
                        }
                    ],
                    "review": {
                        "author": "Borusan Mannesmann",
                        "date": "6 maart, 2018",
                        "stars": 5,
                        "description": "De samenwerking met Expo-Mate verliep vlekkeloos. Alle afspraken zijn goed nagekomen. Ondanks de vele aanpassingen vanuit onze kant, zag de stand er geweldig uit, werd het op tijd opgeleverd en zag de stand er in werkelijkheid hetzelfde uit zoals het ontwerp. Bedankt Expo-Mate!"
                    }
                },
                {
                    "title": "Toshiba Business Display Solutions",
                    "subTitle": "ISE Amsterdam 2018",
                    "description": "Die Herausforderung von Toshiba an uns war, die vielen Produkte und diversen Business Units insgesamt ÃÂ¼bersichtlicher zu prÃÂ¤sentieren. Weiterhin war das Ziel, so viele neue und bestehende GeschÃÂ¤ftskontakte auf dem Stand willkommen heiÃÂen zu kÃÂ¶nnen. Einen erfrischenden Stand mit Raum fÃÂ¼r die PrÃÂ¤sentationen von Produkten war somit der Ausgangspunkt.",
                    "images": [
                        {
                            "src": "assets/images/projects/toshiba/1.jpg",
                            "alt": "Toshiba"
                        },
                        {
                            "src": "assets/images/projects/toshiba/2.jpg",
                            "alt": "Toshiba"
                        },
                        {
                            "src": "assets/images/projects/toshiba/3.jpg",
                            "alt": "Toshiba"
                        },
                        {
                            "src": "assets/images/projects/toshiba/4.jpg",
                            "alt": "Toshiba"
                        },
                        {
                            "src": "assets/images/projects/toshiba/5.jpg",
                            "alt": "Toshiba"
                        },
                        {
                            "src": "assets/images/projects/toshiba/6.jpg",
                            "alt": "Toshiba"
                        },
                        {
                            "src": "assets/images/projects/toshiba/7.jpg",
                            "alt": "Toshiba"
                        }
                    ],
                    "review": {
                        "author": "Toshiba Business Display Solutions",
                        "date": "12 maart, 2018",
                        "stars": 5,
                        "description": "Ondanks het korte tijdsbestek heeft Expo-Mate een perfect resultaat neergezet.  Door ons volledig te ontzorgen met organisatie en begeleiding, zijn wij ondertussen in staat geweest onze volledige focus te houden op andere zaken. Namens Team Grootkeuken Gilde, Chapeau!"
                    }
                },
                {
                    "title": "Lamb Weston/Meijer",
                    "subTitle": "Casual Dining Show London 2018",
                    "description": "Kreiere ein Konzept, mit dem wir prÃÂ¤sentieren kÃÂ¶nnen, dass wir die SchlÃÂ¼sselfiguren auf dem englischen Markt verstanden haben. Diese sind die wachsende Pub-Branche in GroÃÂbritannien. Wie sollte man das besser umsetzen, als durch den Entwurf eines Lamb Weston-Pubs?",
                    "images": [
                        {
                            "src": "assets/images/projects/lamb/1.jpg",
                            "alt": "Lamb Weston/Meijer"
                        },
                        {
                            "src": "assets/images/projects/lamb/2.jpg",
                            "alt": "Lamb Weston/Meijer"
                        },
                        {
                            "src": "assets/images/projects/lamb/3.jpg",
                            "alt": "Lamb Weston/Meijer"
                        },
                        {
                            "src": "assets/images/projects/lamb/4.jpg",
                            "alt": "Lamb Weston/Meijer"
                        },
                        {
                            "src": "assets/images/projects/lamb/5.jpg",
                            "alt": "Lamb Weston/Meijer"
                        },
                        {
                            "src": "assets/images/projects/lamb/6.jpg",
                            "alt": "Lamb Weston/Meijer"
                        },
                        {
                            "src": "assets/images/projects/lamb/7.jpg",
                            "alt": "Lamb Weston/Meijer"
                        }
                    ],
                    "review": {
                        "author": "Lamb Weston Meijer",
                        "date": "6 maart, 2018",
                        "stars": 5,
                        "description": "Een zeer professionele maar ook persoonlijke samenwerking met Expo Mate voor onze stand op de Fruit Logistica in Berlijn. Afspraken zijn nagekomen, werkelijkheid was zoals het ontwerp. Met een paar aanpassingen zijn we weer klaar voor editie 2018! Frankort & Koning BV"
                    }
                },
                {
                    "title": "WvanderZwan",
                    "subTitle": "Seafood Expo Global Brussel 2018",
                    "description": "Omzetting van het bestaande concept in een hoogwaardige stand waarbij de bezoekers ook de mogelijkheid wordt geboden om op de bovenverdieping plaats te nemen in de lounge. Klanten kleine hapjes en drankjes aan te bieden in een ongedwongen sfeer.",
                    "images": [
                        {
                            "src": "assets/images/projects/zwan/1.jpg",
                            "alt": "WvanderZwan"
                        },
                        {
                            "src": "assets/images/projects/zwan/2.jpg",
                            "alt": "WvanderZwan"
                        },
                        {
                            "src": "assets/images/projects/zwan/3.jpg",
                            "alt": "WvanderZwan"
                        },
                        {
                            "src": "assets/images/projects/zwan/4.jpg",
                            "alt": "WvanderZwan"
                        },
                        {
                            "src": "assets/images/projects/zwan/5.jpg",
                            "alt": "WvanderZwan"
                        },
                        {
                            "src": "assets/images/projects/zwan/6.jpg",
                            "alt": "WvanderZwan"
                        }
                    ],
                    "review": {
                        "author": "WvanderZwan",
                        "date": "12 maart, 2018",
                        "stars": 5,
                        "description": "Zeer tevreden over de succesvolle realisatie van onze nieuwe stand en de betrouwbare begeleiding richting onze deelname aan de SIAL in 2016. Er werd goed meegedacht om van idee en tekening tot een succesvolle beursdeelname te komen."
                    }
                },
                {
                    "title": "Tomra Food Sorting NV",
                    "subTitle": "Programma 2018",
                    "description": "ÃÂberragendes Design, saubere und anhaltende Kraft waren die Tomras Ziele fÃÂ¼r den Messestand. Eine modulare Bauweise war dabei in jeder Hinsicht notwendig. Tomra is jedes Jahr auf verschiedenen Messen anwesend und benÃÂ¶tigt hier unterschiedliche StandgrÃÂ¶ÃÂen. Auch sollten die Grafiken schnell und einfach ausgetauscht werden kÃÂ¶nnen, so dass jede Produktgruppe ausreichend kommuniziert werden kann. ",
                    "images": [
                        {
                            "src": "assets/images/projects/tomra/tom-1.jpg",
                            "alt": "Tomra Food Sorting NV"
                        },
                        {
                            "src": "assets/images/projects/tomra/2.jpg",
                            "alt": "Tomra Food Sorting NV"
                        },
                        {
                            "src": "assets/images/projects/tomra/3.jpg",
                            "alt": "Tomra Food Sorting NV"
                        },
                        {
                            "src": "assets/images/projects/tomra/4.jpg",
                            "alt": "Tomra Food Sorting NV"
                        },
                        {
                            "src": "assets/images/projects/tomra/5.jpg",
                            "alt": "Tomra Food Sorting NV"
                        },
                        {
                            "src": "assets/images/projects/tomra/6.jpg",
                            "alt": "Tomra Food Sorting NV"
                        },
                        {
                            "src": "assets/images/projects/tomra/7.jpg",
                            "alt": "Tomra Food Sorting NV"
                        }
                    ],
                    "review": {
                        "author": "Tomra Food Sorting NV",
                        "date": "6 maart, 2018",
                        "stars": 5,
                        "description": "It was a pleasure working with Expo-Mate from the early planning stages through to the execution at the event. Everything was effortless and well thought out - communicative, friendly team. We were very pleased with the end result and received much positive feedback on the Toshiba Business Display Solutions stand itself at ISE 2018, Amsterdam. We look forward to working with you again in the future thanks again, Expo-Mate."
                    }
                },
                {
                    "title": "Aluminium Verkoop Zuid BV (AVZ)",
                    "subTitle": "R+T Stuttgart 2018",
                    "description": "AVZ wollte auf der grÃÂ¶ÃÂten Messe ihres Fachgebietes den neuen Hausstil prÃÂ¤sentieren. Dies haben wir durch ein offenes und zugÃÂ¤ngliches Design umgesetzt.",
                    "images": [
                        {
                            "src": "assets/images/projects/avz/1.jpg",
                            "alt": "AVZ"
                        },
                        {
                            "src": "assets/images/projects/avz/2.jpg",
                            "alt": "AVZ"
                        },
                        {
                            "src": "assets/images/projects/avz/3.jpg",
                            "alt": "AVZ"
                        },
                        {
                            "src": "assets/images/projects/avz/4.jpg",
                            "alt": "AVZ"
                        },
                        {
                            "src": "assets/images/projects/avz/5.jpg",
                            "alt": "AVZ"
                        }
                    ],
                    "review": {
                        "author": "Aluminium Verkoop Zuid BV",
                        "date": "12 maart, 2018",
                        "stars": 5,
                        "description": "It was a pleasure working with the Expo Mate team for the Fruit Logistica Fair in Berlin. From the design phase all the way to the end result at the show, the team helped us realize our ideas. They suggested a creative design, detailed cost overview and the roll-out of the approved plan was good. The booth looked professional, gave us at TOMRA good exposure and branding. The thing I liked most is the personal and close follow-up. If there is anything that was not right (and as all of us know, these things happen during an exhibition :-) ), the team was there to come up with a solution."
                    }
                },
                {
                    "title": "The Scelta Institute BV",
                    "subTitle": "Anuga Keulen, Sial Parijs und FIE Frankfurt",
                    "description": "Man wollte einen neuen Stand, der fÃÂ¼r alle Messen anders aufzubauen ist. Das Erleben des Standes sollte an die kÃÂ¼rzlich eingebrachten ÃÂnderungen des Hausstils anschlieÃÂen. Auch sollten Produkte prÃÂ¤sentiert werden kÃÂ¶nnen, sowohl grafisch wie auch durch Live Cooking.",
                    "images": [
                        {
                            "src": "assets/images/projects/scelta/1.jpg",
                            "alt": "The Scelta Institute BV"
                        },
                        {
                            "src": "assets/images/projects/scelta/2.jpg",
                            "alt": "The Scelta Institute BV"
                        },
                        {
                            "src": "assets/images/projects/scelta/3.jpg",
                            "alt": "The Scelta Institute BV"
                        },
                        {
                            "src": "assets/images/projects/scelta/4.jpg",
                            "alt": "The Scelta Institute BV"
                        },
                        {
                            "src": "assets/images/projects/scelta/5.jpg",
                            "alt": "The Scelta Institute BV"
                        }
                    ],
                    "review": {
                        "author": "The Scelta Institute BV",
                        "date": "6 maart, 2018",
                        "stars": 5,
                        "description": "Very professional, friendly and helpful booth builder from the Netherlands."
                    }
                },
                {
                    "title": "Strong TV",
                    "subTitle": "ANGA Keulen, IFA Berlijn",
                    "description": "PrÃÂ¤sentation der verschiedenen Produktgruppen, wobei neben den TVs auch Platz sein sollte die Receiver und diverse WLAN-LÃÂ¶sungen zu prÃÂ¤sentieren. Ein offener Stand, auf dem genug Raum ist um viele Besucher begrÃÂ¼ÃÂen zu kÃÂ¶nnen.",
                    "images": [
                        {
                            "src": "assets/images/projects/strong/1.jpg",
                            "alt": "Strong TV"
                        },
                        {
                            "src": "assets/images/projects/strong/2.jpg",
                            "alt": "Strong TV"
                        },
                        {
                            "src": "assets/images/projects/strong/3.jpg",
                            "alt": "Strong TV"
                        },
                        {
                            "src": "assets/images/projects/strong/4.jpg",
                            "alt": "Strong TV"
                        },
                        {
                            "src": "assets/images/projects/strong/5.jpg",
                            "alt": "Strong TV"
                        }
                    ],
                    "review": {
                        "author": "Strong TV",
                        "date": "12 maart, 2018",
                        "stars": 5,
                        "description": "The booth was completely built up on the day of arrival and all installations had been done. Small last-minute changes where no problem. Also, the communication with the booth builder team was easy (English/German/Dutch) and the team was very helpful."
                    }
                },
                {
                    "title": "Frankort & Koning BV",
                    "subTitle": "Fruit Logistica Berlijn 2017-2019",
                    "description": "Bestehenden Kunden und Kontakten das GefÃÂ¼hl eines warmen Willkommens geben, inklusive der MÃÂ¶glichkeit, GetrÃÂ¤nke und HÃÂ¤ppchen anbieten zu kÃÂ¶nnen. Insgesamt ein Stand, den man gerne betritt und auf dem genug Platz ist um ein gutes, informelles GesprÃÂ¤ch miteinander zu fÃÂ¼hren.",
                    "images": [
                        {
                            "src": "assets/images/projects/frankfort/1.jpg",
                            "alt": "Frankort & Koning BV"
                        },
                        {
                            "src": "assets/images/projects/frankfort/2.jpg",
                            "alt": "Frankort & Koning BV"
                        },
                        {
                            "src": "assets/images/projects/frankfort/3.jpg",
                            "alt": "Frankort & Koning BV"
                        },
                        {
                            "src": "assets/images/projects/frankfort/4.jpg",
                            "alt": "Frankort & Koning BV"
                        }
                    ],
                    "review": {
                        "author": "Frankort & Koning BV",
                        "date": "6 maart, 2018",
                        "stars": 5,
                        "description": "Really Awesome!"
                    }
                }
            ]
        }
    },
    "en": {
        "nav": {
            "labels": {
                "about": "Our Story",
                "foundation": "Our foundation",
                "mission": "Our Mission Statement and Vision",
                "aboutUs": "Who we are",
                "method": "Working method",
                "process": "Full service Proces",
                "model": "Our Expo-Mate Model",
                "comparision": "Turn design into realization",
                "values": "Our Core Values",
                "projects": "Projects",
                "contact": "Contact"
            }
        },
        "pages": {
            "homepage": {
                "header": {
                    "content": {
                        "title": "Management in Authentic and Trending Exhibition Participations",
                        "backgroundImageSrc": "assets/images/mobile-bg.jpg",
                        "backgroundVideoMp4Src": "assets/video/expo-mate.mp4",
                        "backgroundVideoWebMSrc": "assets/video/expo-mate.webm",
                        "youtubeURL": "zxgIFrCk_uo"
                    }
                },
                "content": {
                    "intro": {
                        "title": "Our Story",
                        "description": "We believe in the power of diversity. Bringing together all different disciplines. We geloven in de kracht van diversiteit. Diversiteit en het samenbrengen van verschillende disciplines zorgt er namelijk voor dat we iedere dag het beste resultaat voor, maar vooral met, onze klanten kunnen realiseren.",
                        "images": [
                            {
                                "src": "assets/images/brands/bo-logo.png",
                                "alt": "Borusan"
                            },
                            {
                                "src": "assets/images/brands/tomra.jpg",
                                "alt": "Tomra"
                            },
                            {
                                "src": "assets/images/brands/toshiba.jpg",
                                "alt": "Toshiba"
                            },
                            {
                                "src": "assets/images/brands/lamb.jpg",
                                "alt": "LambWeston"
                            },
                            {
                                "src": "assets/images/brands/strong.jpg",
                                "alt": "Strong TV"
                            }
                        ]
                    },
                    "about": {
                        "row1": {
                            "image": {
                                "src": "assets/images/1.jpg"
                            },
                            "title": "Our foundation",
                            "description": "10 years of knowledge within the exhibition industry combined with 10 years of experience in the field of sales and marketing  ormen our base. Because of the combination of experiences we can accommodate exhibition concepts as no others within the industry delivering the highest return on investment."
                        },
                        "row2": {
                            "image": {
                                "src": "assets/images/2.jpg"
                            },
                            "title": "Our Mission Statement and Vision",
                            "description": "<p>Everything we do is at EXPO-MATE is based on our right of existence and our dream; our mission statement and vision.</p><p>Our mission statement: Making exhibition participations more successful, more efficient and easier.</p><p>Our vision: At EXPO-MATE we strive to be the most appreciated, leading quality organization within the industry. Wanting to be market leader as a full service project management company by offering authentic, innovative, sustainable and custom made projects for our clients in order to make them achieve their goals. Our clients are our ambassadors, and we make sure our ambassadors are not only completely satisfied with the end result, but also with the path leading to this realization.</p>"
                        }
                    },
                    "aboutUs": {
                        "title": "Who we are?",
                        "description": "",
                        "employees": {
                            "niek": {
                                "title": "Niek van Gent",
                                "description": "Being active as a commercial manager in a role of exhibition manager I understand the need of our clients as if it was my own. This results into a major value increasing element during the design process. Because of acting in the same role as our conversation partner I can emphasize on their needs and wishes. To make them right conversion of the organization into a 3D concept for our clients is my biggest motivation!",
                                "image": {
                                    "src": "assets/images/niek.jpg",
                                    "alt": "Niek van Gent"
                                }
                            },
                            "jan": {
                                "title": "Jan Maas",
                                "description": "After 10 years of working as a Project- and Account Manager within two different companies in the exhibition industry, my opinion is that personal attention and listening to clients and their desires can be a game changer. This was the main reason for me to found EXPOMATE. The experience on both the commercial area as well as the technical aspect within the process we can serve our client as a real soundboard. Commitment towards quality, making sure everything until the smallest detail is taken care of and a personal and nice collaboration making it possible to achieve the (exhibition) goals: That is what drives me!",
                                "image": {
                                    "src": "assets/images/jan.jpg",
                                    "alt": "Jan Maas"
                                }
                            }
                        }
                    },
                    "values": {
                        "title": "Our Core Values",
                        "description": "Whether we are having an advising conversation, present a design concept or handing over a realized stand; everything we do is based upon our core values which are listed below:",
                        "image": {
                            "src": "assets/images/wall.jpg"
                        },
                        "values": {
                            "value1": "Highest Quality",
                            "value2": "Full Service",
                            "value3": "Innovative & Authentic",
                            "value4": "Independent",
                            "value5": "Environmental friendly",
                            "value6": "Operational Excellence"
                        }
                    },
                    "method": {
                        "title": "WORKING METHOD",
                        "hoverLabel": "Move with your mouse over the orbs to learn more.",
                        "description": "Because of the earlier explained different backgrounds we have been able to develop a working method which is unique within the industry and enables us to deliver the highest return on investment for our clients.",
                        "methods": {
                            "intro": {
                                "title": "Introduction",
                                "description": "A personal meet-up in which we discuss your needs, wishes and goals."
                            },
                            "design": {
                                "title": "Design",
                                "description": "Based on your input in addition to the outcome of our 'EXPO-MATE model' we create a authentic, innovative, custom design specifically for your exhibition concept."
                            },
                            "tuning": {
                                "title": "Fine tuning",
                                "description": "We will discuss the design together and if needed, tweak it based on your feedback to create an optimal, desired, definitive design."
                            },
                            "construction": {
                                "title": "Technical preparations & realization",
                                "description": "We will completely take care of the technical preparations and construction of your booth. Naturally, we are there on site at the exhibition as your partner overseeing and being your point of contact."
                            },
                            "eval": {
                                "title": "Evaluation",
                                "description": "After the exhibition has ended, we will discuss the outcome with you to gauge whether or not we have met your goals, if you thought the experience was pleasant and if you have any feedback for us for a potential next project."
                            }
                        }
                    },
                    "model": {
                        "image": {
                            "src": "assets/images/model.jpg"
                        },
                        "title": "THE EXPO-MATE MODEL: FROM INTRODUCTION TO DESIGN",
                        "description": "From our point of view the most important step in the complete process. By investing time and knowledge into the beginning of the process, no assumptions have to be made during the creation of the concept but focusing on the only thing that matters; Integrating your identity, desires and needs  as an exhibition participant. EXPO-MATE has developed  an own, unique, model which enables us to implement key characteristics / values from the organization into the design proposal. We believe that only than the highest return on investment can be achieved. We would be happy explaining you in detail how we can bring the EXPO-MATE model in reality together. "
                    },
                    "projects": {
                        "tile": "OUR PROJECTS",
                        "description": "Innovative & Authentic. Those two words are key in our designs. Every stand is created and developed custom made, and according to the highest quality standards EXPO-MATE has to offer. Please take a look at several examples of designed and executed stands. Wondering what we can do for your organization? Please contact us! ",
                        "reviewLink": "Click here to view the review written by ",
                        "button": {
                            "label": "Our Projects"
                        },
                        "project1": {
                            "title": "Borusan Mannesmann",
                            "button": "Learn More",
                            "image": {
                                "src": "assets/images/projects/borusan/1.jpg",
                                "alt": "Borusan"
                            }
                        },
                        "project2": {
                            "title": "Toshiba",
                            "button": "Learn More",
                            "image": {
                                "src": "assets/images/projects/toshiba/1.jpg",
                                "alt": "Toshiba"
                            }
                        }
                    },
                    "comparison": {
                        "title": "Turn design into realization.",
                        "description": "From the first sketches drawn we are thinking on how a potential design could be perfectly turned . from design into reality. Underneath some examples of how the design has been turned into the actual stand. ",
                        "comparisons": [
                            {
                                "before": "assets/images/comparison/borusan/slider-before.jpg",
                                "after": "assets/images/comparison/borusan/slider-after.jpg"
                            },
                            {
                                "before": "assets/images/comparison/toshiba/slider-before.jpg",
                                "after": "assets/images/comparison/toshiba/slider-after.jpg"
                            },
                            {
                                "before": "assets/images/comparison/lamb/slider-before.jpg",
                                "after": "assets/images/comparison/lamb/slider-after.jpg"
                            },
                            {
                                "before": "assets/images/comparison/zwan/slider-before.jpg",
                                "after": "assets/images/comparison/zwan/slider-after.jpg"
                            }
                        ]
                    }
                },
                "footer": {
                    "testimonials": {
                        "title": "Testimonials"
                    },
                    "contacts": {
                        "header": "Send us an Email",
                        "jan": {
                            "title": "Jan Maas",
                            "links": {
                                "email": {
                                    "title": "j.maas@expo-mate.com",
                                    "src": "mailto:j.maas@expo-mate.com",
                                    "alt": "Email Jan"
                                },
                                "linkedin": {
                                    "title": "Jan on",
                                    "src": "https://nl.linkedin.com/in/maasjan",
                                    "alt": "Jan on LinkedIn"
                                }
                            },
                            "phone": "+31 6 50 28 18 91"
                        },
                        "niek": {
                            "title": "Niek van Gent",
                            "links": {
                                "email": {
                                    "title": "n.van.gent@expo-mate.com",
                                    "src": "mailto:n.van.gent@expo-mate.com"
                                },
                                "linkedin": {
                                    "title": "Niek on",
                                    "src": "https://nl.linkedin.com/in/niek-van-gent-b538781b",
                                    "alt": "Niek on LinkedIn"
                                }
                            },
                            "phone": "+31 6 50 28 18 91"
                        }
                    },
                    "phone": {
                        "header": "Call us"
                    },
                    "visit": {
                        "header": "Visit us",
                        "description": "Garnizoenweg 3 <br/> Building A <br/> Postbus 8064 <br/> 5928 NA Venlo <br/> The Netherlands"
                    },
                    "copyright": {
                        "description": "Copyright 2018, Expo-Mate - All rights reserved."
                    }
                }
            },
            "projects": [
                {
                    "title": "Borusan Mannesmann",
                    "subTitle": "TUBE 2018 DÃ¼sseldorf",
                    "description": "Develop an exhibition concept in which Borusan Mannesmann would receive their most valued clients during their 60 years anniversary. Prestige to make the nicest concept to make the clients feel welcome and enjoy a drink and a bite. ",
                    "images": [
                        {
                            "src": "assets/images/projects/borusan/1.jpg",
                            "alt": "Borusan Mannesmann"
                        },
                        {
                            "src": "assets/images/projects/borusan/2.jpg",
                            "alt": "Borusan Mannesmann"
                        },
                        {
                            "src": "assets/images/projects/borusan/3.jpg",
                            "alt": "Borusan Mannesmann"
                        },
                        {
                            "src": "assets/images/projects/borusan/4.jpg",
                            "alt": "Borusan Mannesmann"
                        },
                        {
                            "src": "assets/images/projects/borusan/5.jpg",
                            "alt": "Borusan Mannesmann"
                        },
                        {
                            "src": "assets/images/projects/borusan/6.jpg",
                            "alt": "Borusan"
                        },
                        {
                            "src": "assets/images/projects/borusan/7.jpg",
                            "alt": "Borusan Mannesmann"
                        },
                        {
                            "src": "assets/images/projects/borusan/8.jpg",
                            "alt": "Borusan Mannesmann"
                        },
                        {
                            "src": "assets/images/projects/borusan/9.jpg",
                            "alt": "Borusan Mannesmann"
                        }
                    ],
                    "review": {
                        "author": "Borusan Mannesmann",
                        "date": "May, 2018",
                        "stars": 5,
                        "description": "We are totally satisfied working with EXPO-MATE in DÃ¼sseldorf Tube 2018. Their timing plan was fine, communication is always perfect, all the materials delivered as discussed. During the exhibition if we wanted to change something, Jan and his team arranged it immediately. We received very positive feedbacks from our customer who visited us on Tube 2018. Overall I can say EXPO-MATE is a very good company and if you have some vision or would like to get an idea from them, they will manage."
                    }
                },
                {
                    "title": "Toshiba Business Display Solutions",
                    "subTitle": "ISE Amsterdam 2018",
                    "description": "The challenge for Toshiba was to deliver a stand concept in which many products and several business units could present their products in a structured stand concept.  ",
                    "images": [
                        {
                            "src": "assets/images/projects/toshiba/1.jpg",
                            "alt": "Toshiba"
                        },
                        {
                            "src": "assets/images/projects/toshiba/2.jpg",
                            "alt": "Toshiba"
                        },
                        {
                            "src": "assets/images/projects/toshiba/3.jpg",
                            "alt": "Toshiba"
                        },
                        {
                            "src": "assets/images/projects/toshiba/4.jpg",
                            "alt": "Toshiba"
                        },
                        {
                            "src": "assets/images/projects/toshiba/5.jpg",
                            "alt": "Toshiba"
                        },
                        {
                            "src": "assets/images/projects/toshiba/6.jpg",
                            "alt": "Toshiba"
                        },
                        {
                            "src": "assets/images/projects/toshiba/7.jpg",
                            "alt": "Toshiba"
                        }
                    ],
                    "review": {
                        "author": "Toshiba Business Display Solutions",
                        "date": "February, 2018",
                        "stars": 5,
                        "description": "It was a pleasure working with Expo-Mate from the early planning stages through to the execution at the event. Everything was effortless and well thought out - communicative, friendly team. We were very pleased with the end result and received much positive feedback on the Toshiba Business Display Solutions stand itself at ISE 2018, Amsterdam. We look forward to working with you again in the future thanks again, EXPO-MATE."
                    }
                },
                {
                    "title": "Lamb Weston/Meijer",
                    "subTitle": "Casual Dining Show London 2018",
                    "description": "Creating a concept to show that Lamb Weston is a key player in the UK market in the expanding pub segment. How can this be done in a better way than creating a LambWeston pub? ",
                    "images": [
                        {
                            "src": "assets/images/projects/lamb/1.jpg",
                            "alt": "Lamb Weston/Meijer"
                        },
                        {
                            "src": "assets/images/projects/lamb/2.jpg",
                            "alt": "Lamb Weston/Meijer"
                        },
                        {
                            "src": "assets/images/projects/lamb/3.jpg",
                            "alt": "Lamb Weston/Meijer"
                        },
                        {
                            "src": "assets/images/projects/lamb/4.jpg",
                            "alt": "Lamb Weston/Meijer"
                        },
                        {
                            "src": "assets/images/projects/lamb/5.jpg",
                            "alt": "Lamb Weston/Meijer"
                        },
                        {
                            "src": "assets/images/projects/lamb/6.jpg",
                            "alt": "Lamb Weston/Meijer"
                        },
                        {
                            "src": "assets/images/projects/lamb/7.jpg",
                            "alt": "Lamb Weston/Meijer"
                        }
                    ],
                    "review": {
                        "author": "Lamb Weston Meijer",
                        "date": "",
                        "stars": 5,
                        "description": ""
                    }
                },
                {
                    "title": "WvanderZwan & Zonen",
                    "subTitle": "Seafood Expo Global Brussel 2018",
                    "description": "Conversion of the existing concept in a high-quality stand where visitors are also given the possibility to enjoy the second storey lounge. Clients can enjoy small bites and drinks in a casual atmosphere. ",
                    "images": [
                        {
                            "src": "assets/images/projects/zwan/1.jpg",
                            "alt": "WvanderZwan"
                        },
                        {
                            "src": "assets/images/projects/zwan/2.jpg",
                            "alt": "WvanderZwan"
                        },
                        {
                            "src": "assets/images/projects/zwan/3.jpg",
                            "alt": "WvanderZwan"
                        },
                        {
                            "src": "assets/images/projects/zwan/4.jpg",
                            "alt": "WvanderZwan"
                        },
                        {
                            "src": "assets/images/projects/zwan/5.jpg",
                            "alt": "WvanderZwan"
                        },
                        {
                            "src": "assets/images/projects/zwan/6.jpg",
                            "alt": "WvanderZwan"
                        }
                    ],
                    "review": {
                        "author": "WvanderZwan",
                        "date": "May, 2018",
                        "stars": 5,
                        "description": "Partly because of our beautifully delivered stand at SEG 2018 in Brussels, we have had a great exhibition. Agreements have been fulfilled and the EXPO-MATE service is of the highest quality! On behalf of W. vand der Zwan & Zonen BV we can recommend EXPO-MATE as a partner!"
                    }
                },
                {
                    "title": "Tomra Food Sorting NV",
                    "subTitle": "Programma 2018",
                    "description": "Standing out from the rest, clean & stopping power; that's what Tomra wanted to see in the stand concept. Because of the given program with different locations and dimensions materials have to be re-usable. This way a cost efficient structure can be setup ",
                    "images": [
                        {
                            "src": "assets/images/projects/tomra/tom-1.jpg",
                            "alt": "Tomra Food Sorting NV"
                        },
                        {
                            "src": "assets/images/projects/tomra/2.jpg",
                            "alt": "Tomra Food Sorting NV"
                        },
                        {
                            "src": "assets/images/projects/tomra/3.jpg",
                            "alt": "Tomra Food Sorting NV"
                        },
                        {
                            "src": "assets/images/projects/tomra/4.jpg",
                            "alt": "Tomra Food Sorting NV"
                        },
                        {
                            "src": "assets/images/projects/tomra/5.jpg",
                            "alt": "Tomra Food Sorting NV"
                        },
                        {
                            "src": "assets/images/projects/tomra/6.jpg",
                            "alt": "Tomra Food Sorting NV"
                        },
                        {
                            "src": "assets/images/projects/tomra/7.jpg",
                            "alt": "Tomra Food Sorting NV"
                        }
                    ],
                    "review": {
                        "author": "Tomra Food Sorting NV",
                        "date": "March, 2018",
                        "stars": 5,
                        "description": "It was a pleasure working with the Expo Mate team for the Fruit Logistica Fair in Berlin. From the design phase all the way to the end result at the show, the team helped us realize our ideas. They suggested a creative design, detailed cost overview and the roll-out of the approved plan was good. The booth looked professional, gave us at TOMRA good exposure and branding. The thing I liked most is the personal and close follow-up. If there is anything that was not right (and as all of us know, these things happen during an exhibition :-) ), the team was there to come up with a solution."
                    }
                },
                {
                    "title": "Aluminium Verkoop Zuid BV (AVZ)",
                    "subTitle": "R+T Stuttgart 2018",
                    "description": "AVZ wanted to have an open and accessible stand which offered them the possibility to demonstrate their new corporate identity & showcase their most important products on the biggest show within their discipline.  ",
                    "images": [
                        {
                            "src": "assets/images/projects/avz/1.jpg",
                            "alt": "AVZ"
                        },
                        {
                            "src": "assets/images/projects/avz/2.jpg",
                            "alt": "AVZ"
                        },
                        {
                            "src": "assets/images/projects/avz/3.jpg",
                            "alt": "AVZ"
                        },
                        {
                            "src": "assets/images/projects/avz/4.jpg",
                            "alt": "AVZ"
                        },
                        {
                            "src": "assets/images/projects/avz/5.jpg",
                            "alt": "AVZ"
                        }
                    ],
                    "review": {
                        "author": "Aluminium Verkoop Zuid BV",
                        "date": "March, 2018",
                        "stars": 5,
                        "description": "The cooperation with EXPO-MATE went flawlessly. All agreements have been properly fulfilled. Despite the many adjustments from our side, the stand looked great, was delivered on time and the stand actually looked the same as the design. Thanks EXPO-MATE!"
                    }
                },
                {
                    "title": "The Scelta Institute BV",
                    "subTitle": "Anuga Keulen, Sial Parijs and FIE Frankfurt",
                    "description": "Scelta wanted to invest into a new stand which would be existing of modular elements that could be re-used for different shows. It should maintain the same look & feel and be able to present their products in a graphic way but also by usage of live cooking.",
                    "images": [
                        {
                            "src": "assets/images/projects/scelta/1.jpg",
                            "alt": "The Scelta Institute BV"
                        },
                        {
                            "src": "assets/images/projects/scelta/2.jpg",
                            "alt": "The Scelta Institute BV"
                        },
                        {
                            "src": "assets/images/projects/scelta/3.jpg",
                            "alt": "The Scelta Institute BV"
                        },
                        {
                            "src": "assets/images/projects/scelta/4.jpg",
                            "alt": "The Scelta Institute BV"
                        },
                        {
                            "src": "assets/images/projects/scelta/5.jpg",
                            "alt": "The Scelta Institute BV"
                        }
                    ],
                    "review": {
                        "author": "The Scelta Institute BV",
                        "date": "6 maart, 2018",
                        "stars": 5,
                        "description": "Very professional, friendly and helpful booth builder from the Netherlands."
                    }
                },
                {
                    "title": "Strong TV",
                    "subTitle": "ANGA Keulen, IFA Berlijn",
                    "description": "Presenting WiFi products as well as televisions on 1 stand and be able to host private conversations with clients in meeting rooms or an informal cup of coffee at the bar. Products take the upper hand at the exhibitions that STRONG TV participates at. ",
                    "images": [
                        {
                            "src": "assets/images/projects/strong/1.jpg",
                            "alt": "Strong TV"
                        },
                        {
                            "src": "assets/images/projects/strong/2.jpg",
                            "alt": "Strong TV"
                        },
                        {
                            "src": "assets/images/projects/strong/3.jpg",
                            "alt": "Strong TV"
                        },
                        {
                            "src": "assets/images/projects/strong/4.jpg",
                            "alt": "Strong TV"
                        },
                        {
                            "src": "assets/images/projects/strong/5.jpg",
                            "alt": "Strong TV"
                        }
                    ],
                    "review": {
                        "author": "Strong TV",
                        "date": "12 maart, 2018",
                        "stars": 5,
                        "description": "The booth was completely built up on the day of arrival and all installations had been done. Small last-minute changes where no problem. Also, the communication with the booth builder team was easy (English/German/Dutch) and the team was very helpful."
                    }
                },
                {
                    "title": "Frankort & Koning BV",
                    "subTitle": "Fruit Logistica Berlijn 2017-2019",
                    "description": "The yearly fruit exhibition in Berlin offers Frankort & Koning the possibility to meet up with clients and suppliers from all over the world active within their industry. An approachable stand where hospitality plays a major factor and was the starting point. ",
                    "images": [
                        {
                            "src": "assets/images/projects/frankfort/1.jpg",
                            "alt": "Frankort & Koning BV"
                        },
                        {
                            "src": "assets/images/projects/frankfort/2.jpg",
                            "alt": "Frankort & Koning BV"
                        },
                        {
                            "src": "assets/images/projects/frankfort/3.jpg",
                            "alt": "Frankort & Koning BV"
                        },
                        {
                            "src": "assets/images/projects/frankfort/4.jpg",
                            "alt": "Frankort & Koning BV"
                        }
                    ],
                    "review": {
                        "author": "Frankort & Koning BV",
                        "date": "6 maart, 2018",
                        "stars": 5,
                        "description": "Really Awesome!"
                    }
                }
            ]
        }
    }
}
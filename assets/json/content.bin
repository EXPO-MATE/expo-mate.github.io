{
  "nl": {
    "nav": {
      "labels": {
        "about": "Ons Verhaal",
        "foundation": "Ons Fundament",
        "mission": "Onze Missie &amp; Visie",
        "aboutUs": "Wie zijn wij",
        "method": "Onze Werkwijze",
        "process": "Full service Proces",
        "model": "Het expo-mate model",
        "comparison": "Van Design naar Realisatie",
        "values": "Onze Kernwaardes",
        "projects": "Projecten",
        "contact": "Contact"
      }
    },
    "pages": {
      "homepage": {
        "header": {
          "content": {
            "header": "Management in Authentic and Trending Exhibition Participations",
            "backgroundImageSrc": "assets/images/mobile-bg.jpg",
            "backgroundVideoMp4Src": "assets/video/expo-mate.mp4",
            "backgroundVideoWebMSrc": "assets/video/expo-mate.webm",
            "youtubeURL": "3vSaz5GEigY"
          }
        },
        "content": {
          "intro": {
            "header": "Ons Verhaal",
            "description": "We geloven in de kracht van diversiteit. Diversiteit en het samenbrengen van verschillende disciplines zorgt er namelijk voor dat we iedere dag het beste resultaat voor, maar vooral met, onze klanten kunnen realiseren.",
            "images": [
              {
                "src": "/assets/images/brands/arconic.jpg",
                "alt": ""
              },
              {
                "src": "assets/images/brands/bo-logo.png",
                "alt": "Borusan",
                "links": null
              },
              {
                "src": "assets/images/brands/toshiba.jpg",
                "alt": "Toshiba",
                "links": null
              },
              {
                "src": "assets/images/brands/tomra.jpg",
                "alt": "Tomra",
                "links": null
              },
              {
                "src": "/assets/images/brands/westfalia.jpg",
                "alt": ""
              },
              {
                "src": "assets/images/brands/lamb.jpg",
                "alt": "LambWeston",
                "links": null
              },
              {
                "src": "/assets/images/brands/Netinsight .jpg",
                "alt": ""
              },
              {
                "src": "/assets/images/brands/Frankort&Koning.jpg",
                "alt": ""
              },
              {
                "src": "/assets/images/brands/Impol.jpg",
                "alt": ""
              },
              {
                "src": "/assets/images/brands/GatesAir.jpg",
                "alt": ""
              },
              {
                "src": "assets/images/brands/strong.jpg",
                "alt": "IMPOL",
                "links": null
              },
              {
                "src": "/assets/images/brands/avz.jpg",
                "alt": ""
              }
            ]
          },
          "about": {
            "row1": {
              "image": {
                "src": "assets/images/1.jpg"
              },
              "header": "ONS FUNDAMENT",
              "description": "<p>10 jaar kennis en ervaring in de beursindustrie gecombineerd met 10 jaar sales en marketing ervaring vormt onze basis. Hierdoor kunnen wij als geen ander unieke beursconcepten bedenken die zorgen voor de hoogste return on investment.</p>"
            },
            "row2": {
              "image": {
                "src": "assets/images/2.jpg"
              },
              "header": "ONZE MISSIE & VISIE",
              "description": "<p>De kapstok van EXPO-MATE. Alles wat we doen is afgeleid van ons bestaansrecht en onze droom; onze missie en visie.</p><p>Onze missie; Beursdeelnames succesvoller, efficënter en gemakkelijker maken. </p><p>Onze visie; EXPO-MATE wil het meest gewaardeerde full service project management bureau zijn binnen de branche en marktleider op het gebied van kwaliteit. Het creëren van authentieke, innovatieve en milieubewuste op maat gemaakte projecten zorgt ervoor dat onze klanten meer dan hun (beurs)doelstellingen bereiken. Door onze manier van werken zijn onze klanten niet alleen tevreden met het eindresultaat, maar ook met het totale proces dat daar naartoe leidt. Hierdoor zijn klanten niet langer klanten maar zijn het onze ambassadeurs.</p>"
            }
          },
          "aboutUs": {
            "header": "WIE ZIJN WIJ?",
            "description": "",
            "employees": {
              "niek": {
                "header": "Niek van Gent",
                "description": "<p>Door zelf als sales\n&amp; marketing manager te hebben gewerkt begrijp ik als geen ander waar onze\nklanten behoeftes aan hebben. Iets waarvan ik merk dat het echt een meerwaarde\nis tijdens het designproces. De omzetting van organisatie naar een concreet\nconcept samen met onze klanten is mijn grootste drijfveer!&nbsp;De hoogst\nmogelijke kwaliteit en een persoonlijke en relaxte manier van samenwerken loopt\nhier als een rode draad doorheen.</p>",
                "image": {
                  "src": "assets/images/niek.jpg",
                  "alt": "Niek van Gent"
                }
              },
              "jan": {
                "header": "Jan Maas",
                "description": "<p>Na 10 jaar werkzaam geweest te zijn als Project- en Accountmanager bij twee bedrijven binnen de beurzen industrie, ben ik van mening dat persoonlijke aandacht en echt luisteren naar de wensen van de klant het allerbelangrijkste is. Dit was de belangrijkste reden om EXPO-MATE te starten. Door de ervaring op commercieel én technisch gebied kunnen we als volledig klankbord naar onze klanten acteren en hen tijdens het volledige proces ontzorgen. Gezamenlijk de (beurs) doelstellingen bereiken middels een prettige en persoonlijke samenwerking is waar ik voor sta!</p>",
                "image": {
                  "src": "assets/images/jan.jpg",
                  "alt": "Jan Maas"
                }
              }
            }
          },
          "values": {
            "header": "ONZE KERNWAARDES",
            "description": "Of we een adviesgesprek voeren, een ontwerp presenteren, of de uiteindelijke stand opleveren, alles wat we doen is gebaseerd op onze kernwaardes welke hieronder zijn weergegeven.",
            "image": {
              "src": "assets/images/wall.jpg"
            },
            "values": {
              "value1": "De Hoogste Kwaliteit",
              "value2": "Full Service",
              "value3": "Innovatief & Authentiek",
              "value4": "Onafhankelijkheid",
              "value5": "Duurzaam",
              "value6": "Operational Excellence"
            }
          },
          "method": {
            "header": "ONZE WERKWIJZE",
            "hoverLabel": "Beweeg met uw muis over de bollen voor meer informatie.",
            "description": "Totale ontzorging. Minder vinden we niet goed genoeg voor onze relaties. Door onze verschillende achtergronden en ervaringen hebben we een werkwijze kunnen ontwikkelen die uniek is in de branche en welke ons in staat stelt de hoogst mogelijke return on investment voor onze relaties te behalen.",
            "methods": {
              "intro": {
                "header": "Introductie",
                "description": "Een persoonlijke kennismaking waarbij de behoeftes, wensen en doelen worden besproken."
              },
              "design": {
                "header": "Design",
                "description": "Op basis van uw input aangevuld met de uitkomst van het 'EXPO-MATE model' maken we een authentiek en innovatief op maat ontworpen beursconcept."
              },
              "tuning": {
                "header": "Finetuning",
                "description": "<p>Gezamenlijk wordt het ontwerp besproken en eventueel aangepast om tot het optimale, definitieve ontwerp te komen.</p>"
              },
              "construction": {
                "header": "Technische voorbereiding en realisatie",
                "description": "<p>Wij verzorgen de volledige technische voorbereiding en opbouw van de stand. Vanzelfsprekend zijn we als uw samenwerkingspartner bij de opbouw aanwezig en zijn we uw aanspreekpunt op de beursvloer.</p>"
              },
              "eval": {
                "header": "Evaluatie",
                "description": "Na afloop bespreken we altijd het project om te zien of doelstellingen zijn behaald, de stand naar tevredenheid is geweest en of er eventuele verbeterpunten zijn voor het eerstvolgende project."
              }
            }
          },
          "model": {
            "header": "Het EXPO-MATE model",
            "description": "<p><font size=\"3\">van Introductie naar Design</font><br></p><p><br></p><p>In onze optiek de belangrijkste stap in het gehele proces. Door tijd te investeren en kennis te delen in het begin van het proces, hoeven er geen aannames te worden gedaan bij het ontwerp van het concept, maar gaat het om datgene wat telt: Integreren van uw identiteit, wensen en behoeftes als beursdeelnemer. EXPO-MATE heeft een eigen -uniek- model ontwikkeld dat ons in staat stelt om de belangrijkste organisatie kenmerken/waardes en identiteit concreet te verwerken in het ontwerpvoorstel. Wij geloven erin dat alleen dan de hoogste return on investment kan worden behaald. We komen dit model graag gedetailleerd uitleggen en gezamenlijk in de praktijk brengen.</p>",
            "image": {
              "src": "assets/images/model.jpg"
            }
          },
          "projects": {
            "header": "ONZE PROJECTEN",
            "description": "<p>Innovatief en authentiek, dat zijn de sleutelwoorden van onze ontwerpen. Iedere stand is custom made ontworpen en gebouwd conform de hoogste kwaliteitsnormen. Bekijk hier enkele voorbeelden van door ons ontworpen en gerealiseerde stands. Benieuwd naar wat we voor uw organisatie kunnen betekenen? Neem dan gerust contact met ons op!</p>",
            "reviewLink": "Bekijk hier de review van",
            "button": {
              "label": "Bekijk onze projecten"
            },
            "project1": {
              "header": "Borusan Mannesmann",
              "button": "Bekijk",
              "image": {
                "src": "assets/images/projects/borusan/1.jpg",
                "alt": "Borusan"
              }
            },
            "project2": {
              "header": "Tomra",
              "button": "Bekijk",
              "image": {
                "src": "assets/images/projects/tomra-asa/1.jpg",
                "alt": "Impol"
              }
            }
          },
          "comparison": {
            "header": "Van design naar realisatie",
            "description": "<p>Vanaf de eerste schetsen denken we na over hoe ons potentiële ontwerp goed gerealiseerd kan worden in de werkelijkheid. Onderstaand enkele voorbeelden van ontwerpen die we uitgevoerd hebben tot de daadwerkelijke beursstand.</p>",
            "comparisons": [
              {
                "before": "assets/images/comparison/borusan/slider-before.jpg",
                "after": "assets/images/comparison/borusan/slider-after.jpg"
              },
              {
                "before": "assets/images/comparison/impol/slider-before.jpg",
                "after": "assets/images/comparison/impol/slider-after.jpg"
              },
              {
                "before": "assets/images/comparison/lamb/slider-before.jpg",
                "after": "assets/images/comparison/lamb/slider-after.jpg"
              },
              {
                "before": "assets/images/comparison/toshiba/slider-before.jpg",
                "after": "assets/images/comparison/toshiba/slider-after.jpg"
              },
              {
                "before": "assets/images/comparison/westfalia/slider-before.jpg",
                "after": "assets/images/comparison/westfalia/slider-after.jpg"
              },
              {
                "before": "assets/images/comparison/zwan/slider-before.jpg",
                "after": "assets/images/comparison/zwan/slider-after.jpg"
              },
              {
                "before": "assets/images/comparison/gates/slider-before.jpg",
                "after": "assets/images/comparison/gates/slider-after.jpg"
              },
              {
                "before": "assets/images/comparison/net/slider-before.jpg",
                "after": "assets/images/comparison/net/slider-after.jpg"
              }
            ]
          }
        },
        "footer": {
          "testimonials": {
            "header": "Testimonials"
          },
          "contacts": {
            "header": "Mail Ons",
            "jan": {
              "header": "Jan Maas",
              "links": {
                "email": {
                  "header": "j.maas@expo-mate.com",
                  "src": "mailto:j.maas@expo-mate.com",
                  "alt": "Email Jan"
                },
                "linkedin": {
                  "header": "Jan op",
                  "src": "https://nl.linkedin.com/in/maasjan",
                  "alt": "Jan On LinkedIn"
                }
              },
              "phone": "+31 6 50 28 18 91"
            },
            "niek": {
              "header": "Niek van Gent",
              "links": {
                "email": {
                  "header": "n.van.gent@expo-mate.com",
                  "src": "mailto:n.van.gent@expo-mate.com"
                },
                "linkedin": {
                  "header": "Niek op",
                  "src": "https://nl.linkedin.com/in/niek-van-gent-b538781b"
                }
              },
              "phone": "+31 6 50 28 18 91"
            }
          },
          "phone": {
            "header": "Bel Ons"
          },
          "visit": {
            "header": "Bezoek Ons",
            "description": "EXPO-MATE <br/> Mgr. Zwijsenstraat 2F <br/> 5914 AJ Venlo <br/> <br/>  Postbus 8064 <br/> 5901 AB Venlo"
          },
          "copyright": {
            "description": "Copyright 2018, Expo-Mate - Alle rechten voorbehouden."
          }
        }
      },
      "projects": [
        {
          "id": "tomra-systems",
          "header": "Tomra Systems",
          "subTitle": "Euroshop Düsseldorf",
          "description": "TOMRA Systems wilde op de Euroshop hun nieuwe corporate identity en veel nieuwe machines tonen. Als globale markleider, moest de stand uniek en innovatief zijn, dit was de vraag die wij kregen. Op deze stand wilde TOMRA hun zeer actuele missie overbrengen op bezoekers, het voorkomen van plastic in ons milieu. Het ultieme doel van TOMRA is namelijk “clean loop recycling”. Hiermee willen ze voorkomen dat er plastic in onze oceanen en milieu terecht komen. Wat is er dan beter dan de “loop” te verwerken als eye-catcher door middel van 200 LED tubes die van kleur veranderen? Door een open machine landschap te creëren kregen bezoekers de kans de machines werkend te zien. Het grote LED scherm, spreekkamers en lounge op de 2e verdieping maakte deze stand tot een uniek project!",
          "images": [
            {
              "src": "/assets/images/projects/tomra-asa/1.jpg",
              "alt": ""
            },
            {
              "src": "/assets/images/projects/tomra-asa/2.jpg",
              "alt": ""
            },
            {
              "src": "/assets/images/projects/tomra-asa/3.jpg",
              "alt": ""
            },
            {
              "src": "/assets/images/projects/tomra-asa/4.jpg",
              "alt": ""
            },
            {
              "src": "/assets/images/projects/tomra-asa/5.jpg",
              "alt": ""
            },
            {
              "src": "/assets/images/projects/tomra-asa/6.jpg",
              "alt": ""
            }
          ],
          "review": {
            "author": "",
            "date": "",
            "stars": 0,
            "description": ""
          }
        },
        {
          "id": "borusan-mannesmann",
          "header": "Borusan Mannesmann",
          "subTitle": "TUBE Düsseldorf",
          "description": "Ontwikkelen van een beurs concept waarin Borusan Mannesmann de belangrijkste klanten kan ontvangen tijdens het 60 jarige bestaan. Prestige om het mooiste concept neer te zetten waarin bezoekers comfortabel wat kunnen eten en drinken. ",
          "images": [
            {
              "src": "assets/images/projects/borusan/1.jpg",
              "alt": "Borusan Mannesmann"
            },
            {
              "src": "assets/images/projects/borusan/2.jpg",
              "alt": "Borusan Mannesmann"
            },
            {
              "src": "assets/images/projects/borusan/3.jpg",
              "alt": "Borusan Mannesmann"
            },
            {
              "src": "assets/images/projects/borusan/4.jpg",
              "alt": "Borusan Mannesmann"
            },
            {
              "src": "assets/images/projects/borusan/5.jpg",
              "alt": "Borusan Mannesmann"
            },
            {
              "src": "assets/images/projects/borusan/6.jpg",
              "alt": "Borusan"
            },
            {
              "src": "assets/images/projects/borusan/7.jpg",
              "alt": "Borusan Mannesmann"
            },
            {
              "src": "assets/images/projects/borusan/8.jpg",
              "alt": "Borusan Mannesmann"
            },
            {
              "src": "assets/images/projects/borusan/9.jpg",
              "alt": "Borusan Mannesmann"
            },
            {
              "src": "assets/images/projects/borusan/10.jpg",
              "alt": "Borusan Mannesmann"
            },
            {
              "src": "assets/images/projects/borusan/11.jpg",
              "alt": "Borusan Mannesmann"
            },
            {
              "src": "assets/images/projects/borusan/12.jpg",
              "alt": "Borusan Mannesmann"
            },
            {
              "src": "assets/images/projects/borusan/13.jpg",
              "alt": "Borusan Mannesmann"
            },
            {
              "src": "assets/images/projects/borusan/14.jpg",
              "alt": "Borusan Mannesmann"
            },
            {
              "src": "assets/images/projects/borusan/15.jpg",
              "alt": "Borusan Mannesmann"
            },
            {
              "src": "assets/images/projects/borusan/16.jpg",
              "alt": "Borusan Mannesmann"
            }
          ],
          "review": {
            "author": "Borusan Mannesmann",
            "date": "Mei, 2018",
            "stars": 5,
            "description": "<p style=\"text-align: center; \">We zijn helemaal tevreden met het werken met EXPO-MATE voor de Tube 2018 in Düsseldorf. Hun timingplan was prima, communicatie is altijd perfect, alle geleverde materialen zoals besproken. Wanneer we tijdens de tentoonstelling iets wilden veranderen, regelde Jan en zijn team het direct. We hebben zeer positieve feedback ontvangen van onze klanten die ons op de Tube 2018 hebben bezocht. Al met al kan ik zeggen dat EXPO-MATE een heel goed bedrijf is. Wanneer je de professionele visie of de eigentijdse mening van EXPO-MATE wilt, zullen zij deze met je delen.</p>"
          }
        },
        {
          "id": "alrec",
          "header": "Alrec",
          "subTitle": "Euroshop Düsseldorf",
          "description": "Alrec ontwerpt en bouwt hoogwaardige shop in shops en interieurs. De stand op de Euroshop moest daarom ook van een erg hoge kwaliteit zijn. We hebben een stand gecombineerd waarin stijl samen kwam met hun nieuwe corporate identity en veel techniek. Zo konden bezoekers onder meer via augmented reality ontdekken wat voor mooie shop in shops Alrec heeft gebouwd en werd het portfolio op een groot LED scherm weergegeven. De 360 approach waarmee Alrec totaaloplossingen biedt aan hun klanten konden bezoekers bekijken op een groot rond display met daarin een touchscreen. Op de tweede verdieping kon men bezoekers ontvangen in de lounge of een meeting ruimte.  ",
          "images": [
            {
              "src": "/assets/images/projects/alrec/1.jpg",
              "alt": ""
            },
            {
              "src": "/assets/images/projects/alrec/2.jpg",
              "alt": ""
            },
            {
              "src": "/assets/images/projects/alrec/3.jpg",
              "alt": ""
            },
            {
              "src": "/assets/images/projects/alrec/4.jpg",
              "alt": ""
            }
          ],
          "review": {
            "author": "",
            "date": "",
            "stars": 0,
            "description": ""
          }
        },
        {
          "id": "impol",
          "header": "Impol",
          "subTitle": "Aluminium Düsseldorf ",
          "description": "Impol wilde een stand waarin de bezoekers zich welkom voelen en waar voldoende ruimte was om onder het genot van een drankje en een hapje bestaande en nieuwe relaties ongedwongen te ontmoeten. De stand moest enkele separatie elementen hebben waardoor bezoekers zich geborgen voelen. Deze zijn gemaakt met producten van Impol zelf. De hoogwaardig custom made display tafels bieden mogelijkheden tot het presenteren van de kleinste aluminium deeltjes.",
          "images": [
            {
              "src": "assets/images/projects/impol/2.jpg",
              "alt": "Impol 1"
            },
            {
              "src": "assets/images/projects/impol/3.jpg",
              "alt": "Impol 2"
            },
            {
              "src": "assets/images/projects/impol/4.jpg",
              "alt": "Impol 3"
            },
            {
              "src": "assets/images/projects/impol/1.jpg",
              "alt": "Impol 4"
            }
          ],
          "review": {
            "author": "IMPOL",
            "date": "October 2018",
            "stars": 5,
            "description": "In oktober 2018 was de Impol Group aanwezig op de Aluminium in Düsseldorf. Mede dankzij de heren EXPO-MATE, vooral Jan (cheers, mate!), Was de deelname aan de Aluminium perfect.\n\nWe besloten om te kiezen voor Expo Mate omdat hun ontwerp fris, modern en in overeenstemming was met onze verwachting ... en budget.\n\nBij het organiseren van zo'n evenement zijn er ontelbare dingen die fout kunnen gaan, niet alleen het bouwen van de stand, maar ook het verzorgen van personeel, bezoekers, hotels, standfeesten, catering etc.\n\nWanneer een standbouwer onze behoeften begrijpt, wanneer hij er altijd voor ons is, ons in alle mogelijke opzichten helpt en alles soepel laat verlopen, dan kunnen wij ons concentreren op andere werkzaamheden - en dat maakt ons leven stukken eenvoudiger.\n\nBedankt, jongens, bedankt, Jan.\n\nImpol Group\n\nPS: \nTijdens de stand oplevering heb ik het ontwerp (linker foto) vergeleken met de werkelijkheid. We zouden bijna het spel kunnen spelen: \"Zie je het verschil?\"\n"
          }
        },
        {
          "id": "arconic",
          "header": "Arconic",
          "subTitle": "Aluminium Düsseldorf",
          "description": "Het logo van Arconic bood ons de mogelijkheid om een uniek standontwerp te maken waarin diagonale vormen de boventoon voeren. De voornamelijk zwarte kleurstelling in combinatie met wit en hout vormen een mooie combinatie met de turquoise kleurige LED verlichting. Door het gebruik van verschillende high end displays kunnen de verschillende objecten tentoongesteld worden.\n",
          "images": [
            {
              "src": "assets/images/projects/Arconic/1.jpg",
              "alt": "Arconic"
            },
            {
              "src": "assets/images/projects/Arconic/2.jpg",
              "alt": "Arconic"
            },
            {
              "src": "assets/images/projects/Arconic/3-2.JPG",
              "alt": "Arconic"
            },
            {
              "src": "assets/images/projects/Arconic/4.JPG",
              "alt": "Arconic"
            }
          ],
          "review": {
            "author": "ARCONIC",
            "date": "December 2018",
            "stars": 4,
            "description": "We hebben zeer prettig samengewerkt met Expo-Mate voor een show in Düsseldorf eerder dit jaar. Expo-Mate voorzag ons van efficiënte, effectieve en creatieve diensten - van ontwerp tot uitvoering - tegen de beste 'value for money'. Bovendien was het team praktisch, flexibel en plezierig om mee samen te werken.\nUit “principe”, geef ik geen perfecte 'vijfsterren'-score, want er moet altijd ruimte voor verbetering zijn. Expo-Mate komt echter in de buurt van perfectie en zou de vijf-sterren test met vlag en wimpel doorstaan (-;\nZe worden ten zeerste aanbevolen.\n"
          }
        },
        {
          "id": "avz",
          "header": "Aluminium Verkoop Zuid BV (AVZ)",
          "subTitle": "R+T Stuttgart, Polyclose Gent",
          "description": "Op de R+T wild AVZ graag een open en toegankelijke stand die hen de mogelijkheid gaf op de grootste beurs binnen hun vakgebied zowel de nieuwe huisstijl te presenteren alsmede de belangrijkste producten tentoon te stellen. \nDe uitdaging op de Polyclose was om de verschillende onderdelen van de AVZ groep terug te laten komen. Een uitdaging die we op hebben gelost door het logo van kleur te laten veranderen. ",
          "images": [
            {
              "src": "assets/images/projects/avz/6.jpg",
              "alt": ""
            },
            {
              "src": "assets/images/projects/avz/7.jpg",
              "alt": ""
            },
            {
              "src": "assets/images/projects/avz/8.jpg",
              "alt": ""
            },
            {
              "src": "assets/images/projects/avz/9.jpg",
              "alt": ""
            },
            {
              "src": "assets/images/projects/avz/10.jpg",
              "alt": ""
            },
            {
              "src": "assets/images/projects/avz/3.jpg",
              "alt": "AVZ"
            },
            {
              "src": "assets/images/projects/avz/1.jpg",
              "alt": "AVZ"
            },
            {
              "src": "assets/images/projects/avz/2.jpg",
              "alt": "AVZ"
            },
            {
              "src": "assets/images/projects/avz/4.jpg",
              "alt": "AVZ"
            },
            {
              "src": "assets/images/projects/avz/5.jpg",
              "alt": "AVZ"
            }
          ],
          "review": {
            "author": "Aluminium Verkoop Zuid BV",
            "date": "April, 2018",
            "stars": 5,
            "description": "De samenwerking met EXPO-MATE verliep vlekkeloos. Alle afspraken zijn goed nagekomen. Ondanks de vele aanpassingen vanuit onze kant, zag de stand er geweldig uit, werd het op tijd opgeleverd en zag de stand er in werkelijkheid hetzelfde uit zoals het ontwerp. Bedankt EXPO-MATE!"
          }
        },
        {
          "id": "wanhua-chemical-group-borsodchem",
          "header": "Wanhua Chemical Group/BorsodChem",
          "subTitle": "K Düsseldorf",
          "description": "De vraag van Borsod voor de K-2019 was om een stand te ontwerpen die open was, klasse uitstraalt en een eye catcher is in zijn geheel. Er is een combinatie van materialen gebruikt waaronder veel hout en herbruikbare materialen om het milieuvriendelijke karakter van Wanhua Chemical Group/BorsodChem te weerspiegelen. Tijdens de beurs is er een groot pers event gehouden waarvoor er een grote LED wand is geïntegreerd in het concept.  ",
          "images": [
            {
              "src": "/assets/images/projects/borsod/1.jpg",
              "alt": ""
            },
            {
              "src": "/assets/images/projects/borsod/2.jpg",
              "alt": ""
            },
            {
              "src": "/assets/images/projects/borsod/3.jpg",
              "alt": ""
            },
            {
              "src": "/assets/images/projects/borsod/4.jpg",
              "alt": ""
            },
            {
              "src": "/assets/images/projects/borsod/5.jpg",
              "alt": ""
            },
            {
              "src": "/assets/images/projects/borsod/6.jpg",
              "alt": ""
            }
          ],
          "review": {
            "author": "Wanhua Chemical Group/Borsodchem",
            "date": "December 2019",
            "stars": 5,
            "description": "Het was erg prettig om met EXPO-MATE te werken! Tijdens de gehele samenwerking was onze projectdirecteur Jan Maas altijd bereikbaar, reageerde altijd snel, en als er een verzoek was, deed hij zijn best om een ​​oplossing te vinden. Zijn grondigheid, geduld, zijn behulpzaamheid hebben veel indruk op ons gemaakt. En het belangrijkste is dat de stand erg mooi en van goede kwaliteit was! Ik kan deze standbouwer alleen maar aanbevelen!\n"
          }
        },
        {
          "id": "lamb-weston-meijer",
          "header": "Lamb Weston/Meijer",
          "subTitle": "Europese programma",
          "description": "<p>Creëer een concept waarmee we laten zien dat we de key spelers in de Engelse markt begrijpen. Dit is het groeiende pub segment in de UK. Hoe kan men dat beter doen dan door de LambWeston pub te ontwerpen?</p>",
          "images": [
            {
              "src": "assets/images/projects/lamb/1.jpg",
              "alt": "Lamb Weston/Meijer"
            },
            {
              "src": "assets/images/projects/lamb/2.jpg",
              "alt": "Lamb Weston/Meijer"
            },
            {
              "src": "assets/images/projects/lamb/3.jpg",
              "alt": "Lamb Weston/Meijer"
            },
            {
              "src": "assets/images/projects/lamb/4.jpg",
              "alt": "Lamb Weston/Meijer"
            },
            {
              "src": "assets/images/projects/lamb/5.jpg",
              "alt": "Lamb Weston/Meijer"
            },
            {
              "src": "assets/images/projects/lamb/6.jpg",
              "alt": "Lamb Weston/Meijer"
            },
            {
              "src": "assets/images/projects/lamb/7.jpg",
              "alt": "Lamb Weston/Meijer"
            },
            {
              "src": "assets/images/projects/lamb/9.jpg",
              "alt": ""
            },
            {
              "src": "assets/images/projects/lamb/10.jpg",
              "alt": ""
            },
            {
              "src": "assets/images/projects/lamb/8.jpg",
              "alt": ""
            },
            {
              "src": "assets/images/projects/lamb2/2.jpg",
              "alt": ""
            },
            {
              "src": "assets/images/projects/lamb2/1.jpg",
              "alt": ""
            },
            {
              "src": "assets/images/projects/lamb2/4.jpg",
              "alt": ""
            }
          ],
          "review": {
            "author": "Lamb Weston Meijer",
            "date": "Oktober, 2018",
            "stars": 5,
            "description": "We werken al meer dan een jaar samen met EXPO-MATE. Ze hebben voor ons een natuurlijke pub omgeving gecreëerd op een van de belangrijkste shows in de UK. Jan en zijn team zijn creatief, betrouwbaar en snel. Ons laatste project in London was nog iets meer complex met een ongebruikelijk en creatief idee van ons communicatie bureau om ons nieuwe product onder de aandacht te brengen. Ze vonden een oplossing en maakten het mogelijk - nog beter dan dat we voor ogen hadden. EXPO-MATE maakte last minute wijzigingen mogelijk en zorgde voor hulp op locatie. Ze hielpen ons ook in de communicatie met de beurs organisatie, wat ons veel tijd opleverde voor andere belangrijke zaken. Het was plezierig om met EXPO-MATE samen te werken en we kijken uit naar onze 3 projecten in de toekomst."
          }
        },
        {
          "id": "toshiba-business-display-solutions",
          "header": "Toshiba Business Display Solutions",
          "subTitle": "ISE Amsterdam",
          "description": "De uitdaging waar Toshiba voor stond was om de vele producten en diverse business units overzichtelijk te presenteren. Daarnaast was de doelstelling om zowel bestaande als ook nieuwe klanten op de stand te kunnen verwelkomen. Een frisse stand met ruimte voor product presentaties was het uitgangspunt",
          "images": [
            {
              "src": "assets/images/projects/toshiba/1.jpg",
              "alt": "Toshiba"
            },
            {
              "src": "assets/images/projects/toshiba/2.jpg",
              "alt": "Toshiba"
            },
            {
              "src": "assets/images/projects/toshiba/3.jpg",
              "alt": "Toshiba"
            },
            {
              "src": "assets/images/projects/toshiba/4.jpg",
              "alt": "Toshiba"
            },
            {
              "src": "assets/images/projects/toshiba/5.jpg",
              "alt": "Toshiba"
            },
            {
              "src": "assets/images/projects/toshiba/6.jpg",
              "alt": "Toshiba"
            },
            {
              "src": "assets/images/projects/toshiba/7.jpg",
              "alt": "Toshiba"
            }
          ],
          "review": {
            "author": "Toshiba Business Display Solutions",
            "date": "Maart, 2018",
            "stars": 5,
            "description": "<p>Het was een genoegen om met EXPO-MATE te werken vanaf de vroege planningsfase tot en met de uitvoering tijdens het evenement. Alles was moeiteloos en goed doordacht, communicatief en vriendelijk team. We waren zeer tevreden met het eindresultaat en kregen veel positieve feedback over de stand van Toshiba Business Display Solutions op ISE 2018, Amsterdam. We zien er naar uit om in de toekomst weer met jullie samen te werken, nogmaals bedankt, EXPO-MATE.</p>"
          }
        },
		{
          "id": "tubacex",
          "header": "TUBACEX",
          "subTitle": "TUBE Düsseldorf",
          "description": "Men wilde een open en warme stand hebben. Een plek waar ze in een ontspannen en gezellige sfeer klanten konden spreken onder het genot van een hapje en drankje.",
          "images": [
            {
              "src": "assets/images/projects/tubacex/1.jpg",
              "alt": "TUBACEX"
            },
            {
              "src": "assets/images/projects/tubacex/2.jpg",
              "alt": "TUBACEX"
            },
            {
              "src": "assets/images/projects/tubacex/3.jpg",
              "alt": "TUBACEX"
            },
            {
              "src": "assets/images/projects/tubacex/4.jpg",
              "alt": "TUBACEX"
            },
            {
              "src": "assets/images/projects/tubacex/5.jpg",
              "alt": "TUBACEX"
            }
          ],
          "review": {
            "author": "",
            "date": "",
            "stars": 0,
            "description": ""
          }
        },
        {
          "id": "westfalia",
          "header": "Westfalia",
          "subTitle": "Fruit Logistica Berlijn, PMA Anaheim, Fruit Attraction Madrid",
          "description": "Westfalia wilde een nieuw standconcept waarbij de standruimte optimaler benut zou worden en daarnaast een kwalitatieve upgrade zou zijn. Vanwege de vele besprekingen wilde men bij voorkeur 6 spreekruimtes hebben maar daarnaast een open en toegankelijk hospitality deel op de stand waar men in een informele sfeer hun klanten kan spreken. Het totale oppervlak bestaat uit 2 delen met een gangpad ertussen. Daardoor hebben we het concept dusdanig opgezet zodat het als een echte eenheid uitziet. Het gehele concept is van hoge kwaliteit en heeft de uitstraling welke een weerspiegeling is van de leidende marktpositie van Westfalia. ",
          "images": [
            {
              "src": "assets/images/projects/westfalia/1.jpg",
              "alt": "westfalia"
            },
            {
              "src": "assets/images/projects/westfalia/2.jpg",
              "alt": "westfalia"
            },
            {
              "src": "assets/images/projects/westfalia/3.jpg",
              "alt": "westfalia"
            },
            {
              "src": "assets/images/projects/westfalia/4.jpg",
              "alt": "westfalia"
            },
          ],
          "review": {
            "author": "WESTFALIA",
            "date": "Maart, 2019",
            "stars": 5,
            "description": "Het team van Expo-Mate heeft een perfecte stand voor ons ontworpen en gerealiseerd op de Fruit Logistica in Berlijn. Er viel werkelijk niets op aan te merken net zoals de professionaliteit van hun werkwijze. Het was een plezier om met het team samen te werken en ik weet zeker dat er in de toekomst meer mogelijkheden zullen zijn om dit te doen. Bedankt!"
          }
        },
        {
          "id": "hoogstraten",
          "header": "Hoogstraten",
          "subTitle": "Fruit Attraction Madrid",
          "description": "De stand van Hoogstraten op de Fruit Attraction was aan een update toe. Het moest open en welkome stand zijn van hoge kwaliteit waar het sustainable karakter in terug kwam waar Hoogstraten voor staat. We hebben daarom veel natuurlijke materialen gebruikt waarbij de mos wand met het grote licht logo een echt eye-catcher was. Er is een custom made stalen kast gemaakt welke volledig herbruikbaar is om hun producten te tonen aan de voorzijde van de stand. Bij het hospitality deel was er ruimte om nog meer producten te tonen. ",
          "images": [
            {
              "src": "/assets/images/projects/hoogstraten/1.jpg",
              "alt": ""
            },
            {
              "src": "/assets/images/projects/hoogstraten/2.jpg",
              "alt": ""
            },
            {
              "src": "/assets/images/projects/hoogstraten/3.jpg",
              "alt": ""
            },
            {
              "src": "/assets/images/projects/hoogstraten/4.jpg",
              "alt": ""
            }
          ],
          "review": {
            "author": "Hoogstraten Aardbeien",
            "date": "December 2019",
            "stars": 5,
            "description": "Fijne samenwerking. Behulpzaam en betrouwbaar. Het resultaat was een mooi afgewerkte beursstand.\n"
          }
        },
        {
          "id": "tomra-food-sorting-nv",
          "header": "Tomra Food Sorting NV",
          "subTitle": "Europese programma",
          "description": "<p>Standing out from the rest, clean &amp; stopping power wilde Tomra graag terug zien. Vanwege het programma met verschillende afmetingen en locaties moeten materialen zoveel mogelijk herbruikbaar zijn. Op deze manier kunnen de materialen kosten efficient ingezet worden.</p>",
          "images": [
            {
              "src": "assets/images/projects/tomra/1.jpg",
              "alt": "Tomra Food Sorting NV"
            },
            {
              "src": "assets/images/projects/tomra/2.jpg",
              "alt": "Tomra Food Sorting NV"
            },
            {
              "src": "assets/images/projects/tomra/3.jpg",
              "alt": "Tomra Food Sorting NV"
            },
            {
              "src": "assets/images/projects/tomra/4.jpg",
              "alt": "Tomra Food Sorting NV"
            },
            {
              "src": "assets/images/projects/tomra/5.jpg",
              "alt": "Tomra Food Sorting NV"
            },
            {
              "src": "assets/images/projects/tomra/6.jpg",
              "alt": "Tomra Food Sorting NV"
            },
            {
              "src": "assets/images/projects/tomra/7.jpg",
              "alt": "Tomra Food Sorting NV"
            },
            {
              "src": "assets/images/projects/tomra/98.jpg",
              "alt": "Tomra Food Sorting NV"
            }
          ],
          "review": {
            "author": "Tomra Food Sorting NV",
            "date": "April, 2018",
            "stars": 5,
            "description": "<p>Het was een genoegen om met het EXPO-MATE team samen te werken voor de Fruit Logistica-beurs in Berlijn. Van de ontwerpfase tot het eindresultaat op de show, het team hielp ons onze ideeën te realiseren. Ze stelden een creatief ontwerp voor, een gedetailleerd kostenoverzicht en de uitrol van het goedgekeurde plan was goed. De stand zag er uiterst professioneel uit, gaf ons bij TOMRA goede bekendheid en branding. Wat ik het leukst vond, is de persoonlijke en nauwe follow-up. Als er iets is dat niet klopt (en zoals we allemaal weten, gebeuren deze dingen tijdens een tentoonstelling :-)), was het team daar om een oplossing te bedenken.</p>"
          }
        },
        {
          "id": "netinsight",
          "header": "NETINSIGHT",
          "subTitle": "IBC Amsterdam, NAB Las Vegas",
          "description": "<p>De stand van Netinsight was toe aan een upgrade. De uitstraling paste niet meer bij hun corporate identity en hun marktpositie. Daarnaast moest het nieuwe concept Netinsight in staat stellen hun innovatieve producten overzichtelijk te presenteren. Deze drie verschillende productgroepen zijn allen met hun eigen identiteit in het concept verwerkt. Behalve de productgroepen is middels het gebruik van diverse AV oplossingen, waaronder 4 hoge kwaliteit LED schermen, gezorgd voor een stand die bezoekers niet ongemerkt voorbij konden lopen.</p>",
          "images": [
            {
              "src": "assets/images/projects/net/3.jpg",
              "alt": "NETINSIGHT"
            },
            {
              "src": "assets/images/projects/net/4.jpg",
              "alt": "NETINSIGHT"
            },
            {
              "src": "/assets/images/projects/net/5.jpg",
              "alt": ""
            },
            {
              "src": "/assets/images/projects/net/6.jpg",
              "alt": ""
            },
            {
              "src": "assets/images/projects/net/2.jpg",
              "alt": "NETINSIGHT"
            },
            {
              "src": "assets/images/projects/net/1.jpg",
              "alt": "NETINSIGHT"
            }
          ],
          "review": {
            "author": "NETINSIGHT",
            "date": "Oktober, 2018",
            "stars": 5,
            "description": "<p>Gemakkelijk om mee samen te werken, creatief, snel en verantwoordelijk. Zou het team van EXPO-MATE graag kunnen aanbevelen. Theres Eldin - Net Insight</p>"
          }
        },
        {
          "id": "gates-air",
          "header": "GATES AIR",
          "subTitle": "IBC Amsterdam",
          "description": "<p>Gates Air wilde met een nieuw&nbsp;concept deelnemen aan hun belangrijkste Europese beurs, de IBC in&nbsp;Amsterdam. Dit concept moest beter passen bij hun leidende marktpositie en de kwaliteit waar Gates Air voor staat. Vanzelfsprekend moest het concept een uiting zijn van hun corporate identity waarbij de kleur rood een prominente rol moest krijgen. Het&nbsp;totale concept zou een echte eye catcher moeten zijn middels een van kleur veranderend LED plafond is dit aardig gelukt, dachten wij</p>",
          "images": [
            {
              "src": "/assets/images/projects/gates/5.jpg",
              "alt": ""
            },
            {
              "src": "/assets/images/projects/gates/4.jpg",
              "alt": ""
            },
            {
              "src": "assets/images/projects/gates/2.jpg",
              "alt": "Gates Air"
            },
            {
              "src": "assets/images/projects/gates/3.jpg",
              "alt": "Gates Air"
            },
            {
              "src": "assets/images/projects/gates/1.jpg",
              "alt": "Gates Air"
            }
          ],
          "review": {
            "author": "Gates Air",
            "date": "Oktober, 2018",
            "stars": 5,
            "description": "<p>Samenwerking met EXPO-MATE voor onze IBC show in Amsterdam maakte mijn dagen geheel zonder stress. Ik geloof werkelijk dat zij de beste partners zijn waar ik mee had kunnen werken. Ze weten zowel hun klanten op waarde te schatten en de kwaliteit van het eind product.</p>"
          }
        },
        {
          "id": "wvanderzwan",
          "header": "WvanderZwan",
          "subTitle": "Seafood Expo Global Brussel",
          "description": "<p>Omzetting van het bestaande concept in een hoogwaardige stand waarbij de bezoekers ook de mogelijkheid wordt geboden om op de bovenverdieping plaats te nemen in de lounge en de klanten kleine hapjes en drankjes aan te bieden in een ongedwongen sfeer.</p>",
          "images": [
            {
              "src": "assets/images/projects/zwan/1.jpg",
              "alt": "WvanderZwan"
            },
            {
              "src": "assets/images/projects/zwan/2.jpg",
              "alt": "WvanderZwan"
            },
            {
              "src": "assets/images/projects/zwan/3.jpg",
              "alt": "WvanderZwan"
            },
            {
              "src": "assets/images/projects/zwan/4.jpg",
              "alt": "WvanderZwan"
            },
            {
              "src": "assets/images/projects/zwan/5.jpg",
              "alt": "WvanderZwan"
            },
            {
              "src": "assets/images/projects/zwan/6.jpg",
              "alt": "WvanderZwan"
            }
          ],
          "review": {
            "author": "WvanderZwan",
            "date": "Juni, 2018",
            "stars": 5,
            "description": "Mede door onze prachtig opgeleverde stand op SEG 2018 in Brussel, hebben wij een geweldige beurs beleefd. Afspraken werden nagekomen en de service van EXPO-MATE is van hoogstaande kwaliteit! Namens W. van der Zwan en Zonen BV kunnen wij iedereen Expo-Mate aanraden als partner!"
          }
        },
        {
          "id": "metinvest",
          "header": "Metinvest",
          "subTitle": "BlechExpo Stuttgart",
          "description": "Metinvest vroeg ons een moderne stand te ontwerpen die een gezellige uitstraling had. Het logo wilde men als grote eye catcher gebruiken. De beperkte stand grootte zorgde ervoor dat er een goede balans gezocht moest worden tussen design en functionaliteit. \n",
          "images": [
            {
              "src": "/assets/images/projects/metinvest/1.jpg",
              "alt": ""
            },
            {
              "src": "/assets/images/projects/metinvest/2.jpg",
              "alt": ""
            },
            {
              "src": "/assets/images/projects/metinvest/3.jpg",
              "alt": ""
            },
            {
              "src": "/assets/images/projects/metinvest/4.jpg",
              "alt": ""
            },
            {
              "src": "/assets/images/projects/metinvest/5.jpg",
              "alt": ""
            },
            {
              "src": "/assets/images/projects/metinvest/6.jpg",
              "alt": ""
            },
            {
              "src": "/assets/images/projects/metinvest/7.jpg",
              "alt": ""
            }
          ],
          "review": {
            "author": "",
            "date": "",
            "stars": 0,
            "description": ""
          }
        },
        {
          "id": "scelta-mushrooms-bv",
          "header": "Scelta Mushrooms BV",
          "subTitle": "Anuga Keulen, Sial Parijs en FIE Frankfurt",
          "description": "Men wilde een nieuwe stand die voor alle beurzen modulair te bouwen is. Dezelfde look en feel waarbij hun producten worden gepresenteerd, zowel grafisch als door middel van live cooking. ",
          "images": [
            {
              "src": "assets/images/projects/scelta/1.jpg",
              "alt": "The Scelta Institute BV"
            },
            {
              "src": "assets/images/projects/scelta/2.jpg",
              "alt": "The Scelta Institute BV"
            },
            {
              "src": "assets/images/projects/scelta/3.jpg",
              "alt": "The Scelta Institute BV"
            },
            {
              "src": "assets/images/projects/scelta/4.jpg",
              "alt": "The Scelta Institute BV"
            },
            {
              "src": "assets/images/projects/scelta/5.jpg",
              "alt": "The Scelta Institute BV"
            }
          ],
          "review": {
            "author": "The Scelta Institute BV",
            "date": "Augustus, 2017",
            "stars": 5,
            "description": "Zeer tevreden over de succesvolle realisatie van onze nieuwe stand en de betrouwbare begeleiding richting onze deelname aan de SIAL in 2016. Er werd goed meegedacht om van idee en tekening tot een succesvolle beursdeelname te komen."
          }
        },
        {
          "id": "strong-tv",
          "header": "Strong TV",
          "subTitle": "ANGA Keulen, IFA Berlijn",
          "description": "Het presenteren van WiFi producten maar ook de tv's op 1 stand waarbij de klanten de mogelijkheid wordt geboden om een priv&eacute; gesprek te kunnen voeren in de meeting ruimtes of een informele kop koffie aan de bar. Producten voeren de boventoon op de technische beurzen waar ze aan deelnemen.",
          "images": [
            {
              "src": "assets/images/projects/strong/1.jpg",
              "alt": "Strong TV"
            },
            {
              "src": "assets/images/projects/strong/2.jpg",
              "alt": "Strong TV"
            },
            {
              "src": "assets/images/projects/strong/3.jpg",
              "alt": "Strong TV"
            },
            {
              "src": "assets/images/projects/strong/4.jpg",
              "alt": "Strong TV"
            },
            {
              "src": "assets/images/projects/strong/5.jpg",
              "alt": "Strong TV"
            }
          ],
          "review": {
            "author": "Strong TV",
            "date": "Juli, 2017",
            "stars": 5,
            "description": "Zeer professioneel, vriendelijk en behulpzaam standbouwer uit Nederland.<br/><br/> De stand werd volledig opgebouwd op de dag van aankomst en alle installaties waren gedaan. Kleine last-minute wijzigingen, waren geen enkel probleem. Ook de communicatie met het team was makkelijk (Engels / Duits / Nederlands) en het team was zeer behulpzaam. Oprichter, de heer Jan Maas bleef tot het einde van de eerste dag van de tentoonstelling en zorgde ervoor dat alles in orde was. We raden EXPO-MATE zeker aan voor elke tentoonstelling.<br/><br/> Onze stand was voor de ANGA COM 2017 in Keulen en we zullen zeker weer de samenwerking aangaan voor komende tentoonstellingen."
          }
        },
        {
          "id": "frankort-koning-bv",
          "header": "Frankort & Koning BV",
          "subTitle": "Fruit Logistica Berlijn ",
          "description": "De jaarlijkse fruitbeurs in Berlijn biedt Frankort & Koning de mogelijkheid om leveranciers en klanten over de hele wereld te ontmoeten. Een laagdrempelige stand waarbij hospitality hoog in het vaandel staat was het uitgangspunt. ",
          "images": [
            {
              "src": "assets/images/projects/frankfort/1.jpg",
              "alt": "Frankort & Koning BV"
            },
            {
              "src": "assets/images/projects/frankfort/2.jpg",
              "alt": "Frankort & Koning BV"
            },
            {
              "src": "assets/images/projects/frankfort/3.jpg",
              "alt": "Frankort & Koning BV"
            },
            {
              "src": "assets/images/projects/frankfort/4.jpg",
              "alt": "Frankort & Koning BV"
            }
          ],
          "review": {
            "author": "Frankort & Koning BV",
            "date": "Oktober, 2017",
            "stars": 5,
            "description": "Een zeer professionele maar ook persoonlijke samenwerking met EXPO-MATE voor onze stand op de Fruit Logistica in Berlijn. Afspraken zijn nagekomen, werkelijkheid was zoals het ontwerp. Met een paar aanpassingen zijn we weer klaar voor editie 2018! Frankort & Koning BV"
          }
        }
      ]
    }
  },
  "de": {
    "nav": {
      "labels": {
        "about": "Unsere Geschichte",
        "foundation": "Unser Fundament",
        "mission": "Unsere Mission und Vision",
        "aboutUs": "Wer wir sind",
        "method": "UNSERE ARBEITSWEISE",
        "process": "Full service Proces",
        "model": "Unser EXPO-MATE Modell",
        "comparison": "Von der Einführung bis zum Design",
        "values": "Unsere Unternehmenswerte",
        "projects": "Projekte",
        "contact": "Kontakt"
      }
    },
    "pages": {
      "homepage": {
        "header": {
          "content": {
            "header": "Management in Authentic and Trending Exhibition Participations",
            "backgroundImageSrc": "assets/images/mobile-bg.jpg",
            "backgroundVideoMp4Src": "assets/video/expo-mate.mp4",
            "backgroundVideoWebMSrc": "assets/video/expo-mate.webm",
            "youtubeURL": "3vSaz5GEigY"
          }
        },
        "content": {
          "intro": {
            "header": "Unsere Geschichte",
            "description": "Wir glauben an die Kraft der Vielfalt. Vielfalt und das Zusammenspiel von unterschiedlichen Disziplinen sorgen dafür, dass wir jeden Tag die besten Ergebnisse für unsere Kunden erzielen.",
            "images": [
              {
                "src": "/assets/images/brands/arconic.jpg",
                "alt": ""
              },
              {
                "src": "assets/images/brands/bo-logo.png",
                "alt": "Borusan",
                "links": null
              },
              {
                "src": "assets/images/brands/toshiba.jpg",
                "alt": "Toshiba",
                "links": null
              },
              {
                "src": "assets/images/brands/tomra.jpg",
                "alt": "Tomra",
                "links": null
              },
              {
                "src": "/assets/images/brands/westfalia.jpg",
                "alt": ""
              },
              {
                "src": "assets/images/brands/lamb.jpg",
                "alt": "LambWeston",
                "links": null
              },
              {
                "src": "/assets/images/brands/Netinsight .jpg",
                "alt": ""
              },
              {
                "src": "/assets/images/brands/frankort.jpg",
                "alt": ""
              },
              {
                "src": "/assets/images/brands/Impol.jpg",
                "alt": ""
              },
              {
                "src": "/assets/images/brands/GatesAir.jpg",
                "alt": ""
              },
              {
                "src": "assets/images/brands/strong.jpg",
                "alt": "Strong TV",
                "links": null
              },
              {
                "src": "/assets/images/brands/avz.jpg",
                "alt": ""
              }
            ]
          },
          "about": {
            "row1": {
              "image": {
                "src": "assets/images/1.jpg"
              },
              "header": "Unser Fundament",
              "description": "10 Jahre Wissen und Erfahrung in der Geschäftswelt der Messen, kombiniert mit 10 Jahren Verkauf und Marketing Erfahrung ist unsere Basis. Dadurch können wir wie kein anderer einzigartige Messestandkonzepte entwerfen, die für eine möglichst hohe Kapitalrendite sorgen."
            },
            "row2": {
              "image": {
                "src": "assets/images/2.jpg"
              },
              "header": "Unsere Mission und Vision",
              "description": "<p>Die Basis von EXPO-MATE: Alles was wir machen, baut auf unserer Mission und Vision auf.</p>\n\n<p>Unsere Mission: Ihre Messeteilnahme erfolgreicher, effizienter und einfacher zu gestalten.</p>\n\n<p>Unsere Vision: EXPO-MATE strebt die Marktführung als Full-Service Dienstleister an, weil wir authentische, innovative, maßgeschneiderte, nachhaltige und zielorientierte Konzepte für unsere Auftraggeber anbieten. Durch unsere Arbeit sind unsere Kunden nicht nur zufrieden mit dem Resultat, sondern auch mit dem Prozess, der zum dem finalen Ergebnis führt. Dadurch sind unsere Kunden nicht nur Kunden, sondern auch unsere Botschafter.</p>"
            }
          },
          "aboutUs": {
            "header": "Wer wir sind?",
            "description": "<p><br></p>",
            "employees": {
              "niek": {
                "header": "Niek van Gent",
                "description": "Aufgrund meiner Erfahrung als kommerzieller Manager verstehe ich schnell, welche Bedürfnisse unsere Kunden haben. Das ist während des Designprozesses ein echter Mehrwert. Da ich selber lange in der Position meiner Gesprächspartner war, kann ich mich in die Bedürfnisse wirklich gut eindenken. Die Umsetzung vom Unternehmen zum konkreten Konzept zusammen mit unseren Kunden ist einer meiner wichtigsten Motive!",
                "image": {
                  "src": "assets/images/niek.jpg",
                  "alt": "Niek van Gent"
                }
              },
              "jan": {
                "header": "Jan Maas",
                "description": "Nachdem ich zehn Jahre in zwei verschiedenen Betrieben der Messe-Industrie als Projekt- und Accountmanager gearbeitet habe, habe ich festgestellt, dass die wichtigsten Punkte in der Zusammenarbeit mit unseren Kunden die Aufmerksamkeit und das Beachten der Wünsche der Kunden sind. Daraufhin habe ich EXPO-MATE aufgebaut. Mit unserer Erfahrung auf kommerzieller und technischer Ebene können wir als absolute Profis vor unseren Kunden auftreten und diesen während des ganzen Prozesses zur Verfügung stehen. Zusammen die (Messe) Ziele zu erreichen mithilfe einer guten und persönlichen Zusammenarbeit: dafür stehe ich!",
                "image": {
                  "src": "assets/images/jan.jpg",
                  "alt": "Jan Maas"
                }
              }
            }
          },
          "values": {
            "header": "Unsere Unternehmenswerte",
            "description": "EXPO-MATE’s Eigenschaften sind die Grundvoraussetzungen für all unsere Handlungen. Von der gemeinsamen Erarbeitung der Messe-Konzepte bis hin zur schlüsselfertigen Messestandübergabe, begleiten wir Sie professionell und kompetent.",
            "image": {
              "src": "assets/images/wall.jpg"
            },
            "values": {
              "value1": "Beste Qualität",
              "value2": "Umweltfreundlich",
              "value3": "Authentisch, Modern & Innovativ",
              "value4": "Unabhängig",
              "value5": "Wirtschaftlich",
              "value6": "Langfristige Kundenbeziehungen"
            }
          },
          "method": {
            "header": "UNSERE ARBEITSWEISE",
            "hoverLabel": " Bewegen Sie die Maus über das Bild für weitere infromation.",
            "description": "Totale Entlastung. Weniger als das finden wir nicht gut genug für unsere Kunden. Durch unsere Erfahrungen in den verschiedensten Berufen haben wir eine für diese Branche einzigartige Arbeitsweise entwickeln können. Diese ermöglicht es uns, für unsere Kunden eine hohe Kapitalrendite zu erreichen.",
            "methods": {
              "intro": {
                "header": "Einführung",
                "description": "Informationsgespräch zur Dokumentation von Anforderungen,\nWünschen und Zielen\n"
              },
              "design": {
                "header": "Design",
                "description": "Auf Basis Ihrer Wünsche und unseres EXPO-MATE Modells entwerfen wir ein authentisches und innovatives Messekonzept nach Maß. "
              },
              "tuning": {
                "header": "Feinabstimmung",
                "description": "Gemeinsame Abstimmungen und Anpassungen der Entwürfe, um letzten Endes zu einem optimalen definitivem Entwurf zu kommen. "
              },
              "construction": {
                "header": "Technische Vorbereitungen und Realisierung",
                "description": "Wir kümmern uns vollständig um die technischen Vorbereitungen und um den Aufbau des Standes.\nSelbstverständlich sind wir als Ihr Partner beim Aufbau des Standes auf dem Ausstellungsgeländer anwesend. Unsere Partner sind Profis, die sich Qualität ganz oben auf Ihre Fahne geschrieben haben. Weiterhin sind wir flexibel und arbeiten lösungsorientiert.\n"
              },
              "eval": {
                "header": "Auswertung",
                "description": "Nachdem die Messe vorbei ist, besprechen wir noch einmal das ganze Projekt. Damit wollen wir sichergehen, dass alle (Messe) Ziele tatsächlich erreicht wurden, der Stand zur Zufriedenheit war und ob es eventuelle Verbesserungspunkte für ein nachfolge Projekt gibt."
              }
            }
          },
          "model": {
            "header": "EXPO-MATE Modell – von der Einführung bis zum Design",
            "description": "Unserer Meinung nach ist dies wohl der wichtigste Schritt im ganzen Prozess. Es ist uns ein großes Anliegen Ihren Vorstellungen und Bedürfnissen als Kunde gerecht zu werden und das richtige Gespür für diese zu entwickeln. Dafür ist es wichtig am Anfang des Projektes Zeit für einen gemeinsamen Informationsaustausch zu investieren. Ein Messestand muss unverwechselbar sein, der Corporate Identity und Markenstrategie entsprechen; für die Umsetzung hat EXPO-MATE ein eigenes Modell entwickelt. Durch dieses Modell bekommen unsere Kunden die höchste Kapitalrendite. Gerne erläutern wir Ihnen das EXPO-MATE Modell ausführlich. Wir stellen Ihnen, als unseren potenziellen Geschäftspartner, die von Ihrem Unternehmen gewünschten Informationen in einer 3D Visualisierung auf der Messe umsetzen würden.",
            "image": {
              "src": "assets/images/model.jpg"
            }
          },
          "projects": {
            "header": "Unsere Projekte",
            "description": "Innovativ und authentisch. Das sind die Schlüsselwörter unserer Entwürfe. Jeder Stand ist eine qualitativ sehr hochwertige Maßanfertigung. Sehen Sie sich hier einige Beispiele von Ständen an, die durch uns entworfenen und realisiert wurden. Neugierig auf was wir für Ihr Unternehmen erreichen könnten? Dann nehmen Sie gerne Kontakt mit uns auf!",
            "reviewLink": "Hier finden Sie die Rezension von ",
            "button": {
              "label": "Sehen Sie sich unsere Projekte an"
            },
            "project1": {
              "header": "Borusan Mannesmann",
              "button": "Sehen Sie das Projekt hier an",
              "image": {
                "src": "assets/images/projects/borusan/1.jpg",
                "alt": "Borusan"
              }
            },
            "project2": {
              "header": "Tomra",
              "button": "Sehen Sie das Projekt hier an",
              "image": {
                "src": "assets/images/projects/tomra-asa/1.jpg",
                "alt": "Impol"
              }
            }
          },
          "comparison": {
            "header": "Von Design bis zur Realization",
            "description": "Von der ersten Skizze an wird angenommen, dass das endgültige Design auch perfekt in der Realität umgesetzt werden kann.  Sehen Sie einige Beispiele zwischen Design und Endergebnis unten:",
            "comparisons": [
              {
                "before": "assets/images/comparison/borusan/slider-before.jpg",
                "after": "assets/images/comparison/borusan/slider-after.jpg"
              },
              {
                "before": "assets/images/comparison/impol/slider-before.jpg",
                "after": "assets/images/comparison/impol/slider-after.jpg"
              },
              {
                "before": "assets/images/comparison/lamb/slider-before.jpg",
                "after": "assets/images/comparison/lamb/slider-after.jpg"
              },
              {
                "before": "assets/images/comparison/toshiba/slider-before.jpg",
                "after": "assets/images/comparison/toshiba/slider-after.jpg"
              },
              {
                "before": "assets/images/comparison/westfalia/slider-before.jpg",
                "after": "assets/images/comparison/westfalia/slider-after.jpg"
              },
              {
                "before": "assets/images/comparison/zwan/slider-before.jpg",
                "after": "assets/images/comparison/zwan/slider-after.jpg"
              },
              {
                "before": "assets/images/comparison/gates/slider-before.jpg",
                "after": "assets/images/comparison/gates/slider-after.jpg"
              },
              {
                "before": "assets/images/comparison/net/slider-before.jpg",
                "after": "assets/images/comparison/net/slider-after.jpg"
              }
            ]
          }
        },
        "footer": {
          "testimonials": {
            "header": "Testimonials"
          },
          "contacts": {
            "header": "E-Mailen Sie uns",
            "jan": {
              "header": "Jan Maas",
              "links": {
                "email": {
                  "header": "j.maas@expo-mate.com",
                  "src": "mailto:j.maas@expo-mate.com",
                  "alt": "Email Jan"
                },
                "linkedin": {
                  "header": "Jan auf",
                  "src": "https://nl.linkedin.com/in/maasjan",
                  "alt": "Jan auf LinkedIn"
                }
              },
              "phone": "+31 6 50 28 18 91"
            },
            "niek": {
              "header": "Niek van Gent",
              "links": {
                "email": {
                  "header": "n.van.gent@expo-mate.com",
                  "src": "mailto:n.van.gent@expo-mate.com"
                },
                "linkedin": {
                  "header": "Niek auf",
                  "src": "https://nl.linkedin.com/in/niek-van-gent-b538781b"
                }
              },
              "phone": "+31 6 50 28 18 91"
            }
          },
          "phone": {
            "header": "Rufen Sie uns an"
          },
          "visit": {
            "header": "Besuchen Sie uns",
            "description": "Mgr. Zwijsenstraat 2F <br/> 5914 AJ Venlo <br/> Niederlande <br/><br/>PO Box 8064 <br/> 5901 AB Venlo "
          },
          "copyright": {
            "description": "Copyright 2018, Expo-Mate - Alle Rechte vorbehalten."
          }
        }
      },
      "projects": [
        {
          "id": "tomra-systems",
          "header": "Tomra Systems",
          "subTitle": "Euroshop Düsseldorf",
          "description": "TOMRA Systems wollte auf der Euroshop ihre neue Corporate Identity und viele neue Maschinen in den Fokus stellen. Als globaler Marktführer musste der Stand einzigartig und innovativ sein. Auf dem Stand wollte der Betrieb seine sehr aktuelle Mission kommunizieren: die Vermeidung von Plastik in der Umwelt. Das große Ziel von TOMRA ist nämlich „clean loop recycling“. Hiermit wollen sie verhindern, dass Plastik in den Ozeanen und in der Umwelt ended. Was ist dann also besser, als den „loop“ als Eye Catcher mit Hilfe von 200 LED Lampen zu verarbeiten, die ihre Farbe stetig verändern? Durch eine offene Maschinen Landschaft haben die Besucher die Chance, zu sehen wie die Maschinen arbeiten. Der große LED Bildschirm, Meeting Räume und eine Lounge auf der ersten Etage machte diesen Stand zu einem einzigartigem Projekt!",
          "images": [],
          "review": {
            "author": "",
            "date": "",
            "stars": 0,
            "description": ""
          }
        },
        {
          "id": "borusan-mannesmann",
          "header": "Borusan Mannesmann",
          "subTitle": "TUBE Düsseldorf",
          "description": "Ein Ausstellungskonzept zu kreieren, in dem Borusan Mannesman ihre geschätzten Kunden während ihres 60-jährigen Jubiläums empfangen können. Die Herausforderung, um das schönste Konzept zu entwickeln, damit sich die Kunden willkommen fühlen und auch in Ruhe einen Drink genießen können. ",
          "images": [
            {
              "src": "assets/images/projects/borusan/1.jpg",
              "alt": "Borusan Mannesmann"
            },
            {
              "src": "assets/images/projects/borusan/2.jpg",
              "alt": "Borusan Mannesmann"
            },
            {
              "src": "assets/images/projects/borusan/3.jpg",
              "alt": "Borusan Mannesmann"
            },
            {
              "src": "assets/images/projects/borusan/4.jpg",
              "alt": "Borusan Mannesmann"
            },
            {
              "src": "assets/images/projects/borusan/5.jpg",
              "alt": "Borusan Mannesmann"
            },
            {
              "src": "assets/images/projects/borusan/6.jpg",
              "alt": "Borusan"
            },
            {
              "src": "assets/images/projects/borusan/7.jpg",
              "alt": "Borusan Mannesmann"
            },
            {
              "src": "assets/images/projects/borusan/8.jpg",
              "alt": "Borusan Mannesmann"
            },
            {
              "src": "assets/images/projects/borusan/9.jpg",
              "alt": "Borusan Mannesmann"
            },
            {
              "src": "assets/images/projects/borusan/10.jpg",
              "alt": "Borusan Mannesmann"
            },
            {
              "src": "assets/images/projects/borusan/11.jpg",
              "alt": "Borusan Mannesmann"
            },
            {
              "src": "assets/images/projects/borusan/12.jpg",
              "alt": "Borusan Mannesmann"
            },
            {
              "src": "assets/images/projects/borusan/13.jpg",
              "alt": "Borusan Mannesmann"
            },
            {
              "src": "assets/images/projects/borusan/14.jpg",
              "alt": "Borusan Mannesmann"
            },
            {
              "src": "assets/images/projects/borusan/15.jpg",
              "alt": "Borusan Mannesmann"
            },
            {
              "src": "assets/images/projects/borusan/16.jpg",
              "alt": "Borusan Mannesmann"
            }
          ],
          "review": {
            "author": "Borusan Mannesmann",
            "date": "May, 2018",
            "stars": 5,
            "description": "We are totally satisfied working with EXPO-MATE in Düsseldorf Tube 2018. Their timing plan was fine, communication is always perfect, all the materials delivered as discussed. During the exhibition if we wanted to change something, Jan and his team arranged it immediately. We received very positive feedbacks from our customer who visited us on Tube 2018. Overall I can say EXPO-MATE is a very good company and if you have some vision or would like to get an idea from them, they will manage."
          }
        },
        {
          "id": "alrec",
          "header": "Alrec",
          "subTitle": "Euroshop Düsseldorf",
          "description": "Alrec entwirft und baut hochwertige Shop in Shops und Inneneinrichtungen. Der Stand auf der Euroshop musste darum auch sehr hochwertig sein. Wir haben darum einen Stand gebaut, der eine Kombination von Stil, neuer Corporate Identity und viel Technik war. So konnten Besucher unter anderem via augmented reality entdecken, welche großartigen Shop in Shops-Systeme Alrec bereits gebaut hat. Das Portfolio wurde auf einem großen LED Bildschirm wiedergegeben. Das 360 Grad Angebot, womit Alrec seinen Kunden Totallösungen anbietet konnten die Besucher auf einem großen, runden Touchscreen betrachten. Im ersten Geschoss konnte der Betrieb in einer Lounge oder einem Meeting Raum Besucher empfangen.",
          "images": [],
          "review": {
            "author": "",
            "date": "",
            "stars": 0,
            "description": ""
          }
        },
        {
          "id": "impol",
          "header": "impol",
          "subTitle": "Aluminium Düsseldorf",
          "description": "Impol wollte einen Stand haben, auf dem sich die Besucher willkommen fühlen und genügend Platz haben, um ein Getränk und einen Happen zu essen und um bestehende und neue Kunden in einer ungezwungenen Atmosphäre zu treffen. Der Stand musste einige Trennelemente haben, um den Besuchern ein Gefühl der Sicherheit zu vermitteln. Diese wurden mit Impol-Produkten hergestellt. Die maßgefertigten, hochwertigen Anzeigetische bieten die Möglichkeit, um auch die kleinste Aluminiumteile zu präsentieren.",
          "images": [
            {
              "src": "assets/images/projects/impol/2.jpg",
              "alt": "Impol"
            },
            {
              "src": "assets/images/projects/impol/3.jpg",
              "alt": "Impol"
            },
            {
              "src": "assets/images/projects/impol/3.jpg",
              "alt": "Impol"
            },
            {
              "src": "assets/images/projects/impol/1.jpg",
              "alt": "Impol"
            }
          ],
          "review": {
            "author": "IMPOL",
            "date": "October 2018",
            "stars": 5,
            "description": "In October 2018, Impol Group was exhibiting at Aluminium trade fair in Düsseldorf. Also, thanks to the guys Expo Mate, especially Jan (cheers, mate!), our exhibition success was perfect.\n\nWe decided to choose EXPO-MATE among other stand builders as their design was fresh, modern and in line with our expectation… and budget. \n\nWhen organizing such an event (it's not only building a stand, it's also taking care for the staff, visitors, hotels, stand party, catering etc.), there are zillions of things that could go wrong.  \n\nWhen a stand-builder understand your needs, when he is always there for you, helping you in every possible respect and making everything running smooth, then you can concentrate on the other little projects and tasks - and that makes your life a bit easier.\n\nThank you, guys, thank you, Jan.\n\nImpol Group\n\nPS:\nI was also playing around and compared accepted design (left picture) and stand after it was handled over. We could almost play game \"can you spot the difference?\"\n\nWell done!"
          }
        },
        {
          "id": "arconic",
          "header": "Arconic",
          "subTitle": "Aluminium Düsseldorf",
          "description": "Das Logo von Arconic ermöglichte uns diagonaler Formen zu verwenden, um einen einzigartigen Stand zu entwerfen. Die überwiegend schwarze Farbpalette in Kombination mit weißen Elemtenen und Holz, sowie türkisfarbenen LED-Leuchten führte zu einer atemberaubenden Kombination von Farben und Formen. Die High-End-Displays präsentierten mehrere Elemente rund um den Stand selbst.",
          "images": [
            {
              "src": "assets/images/projects/Arconic/1.jpg",
              "alt": "Arconic"
            },
            {
              "src": "assets/images/projects/Arconic/2.jpg",
              "alt": "Arconic"
            },
            {
              "src": "assets/images/projects/Arconic/3-2.JPG",
              "alt": "Arconic"
            },
            {
              "src": "assets/images/projects/Arconic/4.JPG",
              "alt": "Arconic"
            }
          ],
          "review": {
            "author": "ARCONIC",
            "date": "Dezember 2018",
            "stars": 4,
            "description": "Very much enjoyed working with the Expo-Mate team for a show in Dusseldorf earlier this year. Expo-Mate provided us with efficient, effective and creative services - from design to execution - against the best 'value for money'. Above all, the team was hands on, flexible and fun to work with.\nAs a matter of ‘principle’, I don’t give a perfect ‘five star’ score, as there should always be a continuous strive for improvement. However Expo-Mate comes close to perfection and would pass the five-star test with flying colors (-;\nThey come highly recommended."
          }
        },
        {
          "id": "avz",
          "header": "Aluminium Verkoop Zuid BV (AVZ)",
          "subTitle": "R+T Stuttgart, Polyclose Gent",
          "description": "AVZ wollte auf der größten Messe ihres Fachgebietes den neuen Hausstil präsentieren. Dies haben wir durch ein offenes und zugängliches Design umgesetzt.\n",
          "images": [
            {
              "src": "assets/images/projects/avz/3.jpg",
              "alt": "AVZ"
            },
            {
              "src": "assets/images/projects/avz/1.jpg",
              "alt": "AVZ"
            },
            {
              "src": "assets/images/projects/avz/2.jpg",
              "alt": "AVZ"
            },
            {
              "src": "assets/images/projects/avz/4.jpg",
              "alt": "AVZ"
            },
            {
              "src": "assets/images/projects/avz/5.jpg",
              "alt": "AVZ"
            }
          ],
          "review": {
            "author": "Aluminium Verkoop Zuid BV",
            "date": "March, 2018",
            "stars": 5,
            "description": "The cooperation with EXPO-MATE went flawlessly. All agreements have been properly fulfilled. Despite the many adjustments from our side, the stand looked great, was delivered on time and the stand actually looked the same as the design. Thanks EXPO-MATE!"
          }
        },
        {
          "id": "wanhua-chemical-group-borsodchem",
          "header": "Wanhua Chemical Group/BorsodChem",
          "subTitle": "K Düsseldorf",
          "description": "Borsod wollte für die K-2019 einen Stand entwerfen, der offen war, Klasse ausstrahlt und im Großen und Ganzen ein Eye Catcher ist. Somit wurden dann eine Kombination von verschiedenen Materialien genutzt, wobei viel Holz und wieder benutzbare Materialien im Zentrum standen, um den umweltfreundlichen Charakter der Wanhua Chemical Group / BorsodChem widerzuspiegeln. Während der Messe wurde ein großes Presse-Event veranstaltet, wobei die große LED Wand im Konzept integriert wurde. ",
          "images": [
            {
              "src": "/assets/images/projects/borsod/1.jpg",
              "alt": ""
            },
            {
              "src": "/assets/images/projects/borsod/2.jpg",
              "alt": ""
            },
            {
              "src": "/assets/images/projects/borsod/3.jpg",
              "alt": ""
            },
            {
              "src": "/assets/images/projects/borsod/4.jpg",
              "alt": ""
            },
            {
              "src": "/assets/images/projects/borsod/5.jpg",
              "alt": ""
            },
            {
              "src": "/assets/images/projects/borsod/6.jpg",
              "alt": ""
            }
          ],
          "review": {
            "author": "Wanhua Chemical Group/Borsodchem",
            "date": "December 2019",
            "stars": 5,
            "description": "It was really a good experience working with EXPO-MATE! During the whole K fair preparation process, our project director Jan Maas always replied to our emails promptly, when we had some urgent request, he always responded to our demands quickly and tried his best to find a solution. His thoroughness, patience, his being helpful impressed me lot. Most importantly, the stand is very nice and good quality! I could only highly recommend this stand constructor!"
          }
        },
        {
          "id": "lamb-weston-meijer",
          "header": "Lamb Weston/Meijer",
          "subTitle": "Europäisch Programm",
          "description": "Ein Konzept, um zu zeigen, dass Lamb Weston eine Schlüsselfigur auf dem expandierenden britischen Pub-Segment ist! Wie sollte man das besser umsetzen, als durch den Entwurf eines Lamb Western Pubs?",
          "images": [
            {
              "src": "assets/images/projects/lamb/1.jpg",
              "alt": "Lamb Weston/Meijer"
            },
            {
              "src": "assets/images/projects/lamb/2.jpg",
              "alt": "Lamb Weston/Meijer"
            },
            {
              "src": "assets/images/projects/lamb/3.jpg",
              "alt": "Lamb Weston/Meijer"
            },
            {
              "src": "assets/images/projects/lamb/4.jpg",
              "alt": "Lamb Weston/Meijer"
            },
            {
              "src": "assets/images/projects/lamb/5.jpg",
              "alt": "Lamb Weston/Meijer"
            },
            {
              "src": "assets/images/projects/lamb/6.jpg",
              "alt": "Lamb Weston/Meijer"
            },
            {
              "src": "assets/images/projects/lamb/7.jpg",
              "alt": "Lamb Weston/Meijer"
            },
            {
              "src": "assets/images/projects/lamb/8.jpg",
              "alt": ""
            },
            {
              "src": "assets/images/projects/lamb/9.jpg",
              "alt": ""
            },
            {
              "src": "assets/images/projects/lamb/10.jpg",
              "alt": ""
            },
            {
              "src": "assets/images/projects/lamb2/2.jpg",
              "alt": ""
            },
            {
              "src": "assets/images/projects/lamb2/1.jpg",
              "alt": ""
            },
            {
              "src": "assets/images/projects/lamb2/4.jpg",
              "alt": ""
            }
          ],
          "review": {
            "author": "Lamb Weston Meijer",
            "date": "October, 2018",
            "stars": 5,
            "description": "We’re working with EXPO-MATE already more than a year. They’ve created a natural looking pub environment for us at one of our most important shows in the UK. Jan and his team were creative, reliable and fast. Our last project in London was even more complex with an unusual and creative idea of our agency showcasing a new product. They found a solution and made it happen – even better than we had in mind. EXPO-MATE amended last minute wishes and delivered on site support as well. They also helped us in the communication with trade show organisers, which saved us a lot of time for other to do’s! It was a pleasure to work with the EXPO-MATE and we look forward to our three projects in the future! "
          }
        },
        {
          "id": "toshiba-business-display-solutions",
          "header": "Toshiba Business Display Solutions",
          "subTitle": "ISE Amsterdam",
          "description": "Die Herausforderung von Toshiba an uns war, ihre vielen Produkte und diversen Business Units übersichtlicher zu präsentieren. Ein weiteres Ziel war, neue sowie bestehende Geschäftskontakte auf dem Stand willkommen zu heißen. Der Ausgangspunkt für uns war: Ein erfrischender Stand mit Raum für die Präsentationen von Produkten.",
          "images": [
            {
              "src": "assets/images/projects/toshiba/1.jpg",
              "alt": "Toshiba"
            },
            {
              "src": "assets/images/projects/toshiba/2.jpg",
              "alt": "Toshiba"
            },
            {
              "src": "assets/images/projects/toshiba/3.jpg",
              "alt": "Toshiba"
            },
            {
              "src": "assets/images/projects/toshiba/4.jpg",
              "alt": "Toshiba"
            },
            {
              "src": "assets/images/projects/toshiba/5.jpg",
              "alt": "Toshiba"
            },
            {
              "src": "assets/images/projects/toshiba/6.jpg",
              "alt": "Toshiba"
            },
            {
              "src": "assets/images/projects/toshiba/7.jpg",
              "alt": "Toshiba"
            }
          ],
          "review": {
            "author": "Toshiba Business Display Solutions",
            "date": "February, 2018",
            "stars": 5,
            "description": "It was a pleasure working with Expo-Mate from the early planning stages through to the execution at the event. Everything was effortless and well thought out - communicative, friendly team. We were very pleased with the end result and received much positive feedback on the Toshiba Business Display Solutions stand itself at ISE 2018, Amsterdam. We look forward to working with you again in the future thanks again, EXPO-MATE."
          }
        },
				{
          "id": "tubacex",
          "header": "TUBACEX",
          "subTitle": "TUBE Düsseldorf",
          "description": "Sie wollten einen offenen und warmen Stand. Wo sie sich in entspannter und gemütlicher Atmosphäre bei ein Getränk mit Kunden unterhalten konnten.",
          "images": [
            {
              "src": "assets/images/projects/tubacex/1.jpg",
              "alt": "TUBACEX"
            },
            {
              "src": "assets/images/projects/tubacex/2.jpg",
              "alt": "TUBACEX"
            },
            {
              "src": "assets/images/projects/tubacex/3.jpg",
              "alt": "TUBACEX"
            },
            {
              "src": "assets/images/projects/tubacex/4.jpg",
              "alt": "TUBACEX"
            },
            {
              "src": "assets/images/projects/tubacex/5.jpg",
              "alt": "TUBACEX"
            }
          ],
          "review": {
            "author": "",
            "date": "",
            "stars": 0,
            "description": ""
          }
        },
        {
          "id": "westfalia",
          "header": "Westfalia",
          "subTitle": "Fruit Logistica Berlin, PMA Anaheim, Fruit Attraction Madrid",
          "description": "Westfalia forderte EXPO-MATE auf, ein neues Standkonzept zu entwickeln, bei dem die Standfläche optimiert und ein qualitatives Upgrade zu sehen ist. Aufgrund der vielen Treffen mit Kunden bevorzugten sie 6 Besprechungsräume sowie eine offene und einladende Abteilung am Stand. Dort konnten sie mit Kunden in einer informellen Atmosphäre sprechen. Die Standfläche besteht aus 2 Teilen und einem Gang dazwischen. Wir haben daher dieses Standkonzept gewählt um beide Flächen miteinander zu verbinden, um somit eine Einheit zu schaffen.  Die gesamte Standausführung ist von höchster Qualität und zeigt die führende Marktposition von Westfalia.",
          "images": [
            {
              "src": "assets/images/projects/westfalia/1.jpg",
              "alt": ""
            },
            {
              "src": "assets/images/projects/westfalia/2.jpg",
              "alt": ""
            },
            {
              "src": "assets/images/projects/westfalia/3.jpg",
              "alt": ""
            },
            {
              "src": "assets/images/projects/westfalia/4.jpg",
              "alt": ""
            }
          ],
          "review": {
            "author": "WESTFALIA",
            "date": "March, 2019",
            "stars": 5,
            "description": "Simply can't fault the Expo-Mate team on the quality of stand they produced for us at Fruit Logistica Berlin and the professionalism of their services. It was a pleasure working with the team and I'm sure there will be more opportunities to do so in future. Thanks!"
          }
        },
        {
          "id": "hoogstraten",
          "header": "Hoogstraten",
          "subTitle": "Fruit Attraction Madrid",
          "description": "Der Stand von Hoogstraten auf der Fruit Attraction brauchte dringend ein Update. Er sollte offen und einladend wirken und gleichzeitig Nachhaltigkeit und hohe Qualität ausstrahlen, denn hierfür steht Hoogstraten. Darum haben wir viele natürliche Materialien benutzt, wobei die Wand aus Moos mit dem großen beleuchtetem Logo ein echter Eye Catcher war. Es wurde zudem ein Schrank hergestellt, der vollständig wieder benutzbar ist. Hiermit wurden auf die Produkte an der Vorderseite des Standes besser aufmerksam gemacht. Auch in dem Hospitality Teil des Stands war noch genug Raum, um den Fokus mehr auf die Produkte zu legen. ",
          "images": [],
          "review": {
            "author": "Hoogstraten Aardbeien",
            "date": "December 2019",
            "stars": 5,
            "description": "We had a very nice collaboration with EXPO-MATE. Helpful and reliable. The result was a beautifully finished exhibition stand."
          }
        },
        {
          "id": "tomra-food-sorting-nv",
          "header": "Tomra Food Sorting NV",
          "subTitle": "Europäisch Programm",
          "description": "Überragendes Design, saubere und anhaltende Kraft waren die Tomras Ziele für den Messestand. Eine modulare Bauweise war dabei in jeder Hinsicht notwendig. Tomra ist jedes Jahr auf verschiedenen Messen anwesend und benötigt hier unterschiedliche Standgrößen. Auch sollten die Grafiken schnell und einfach ausgetauscht werden können, so dass jede Produktgruppe ausreichend kommuniziert werden kann.",
          "images": [
                       {
              "src": "assets/images/projects/tomra/1.jpg",
              "alt": "Tomra Food Sorting NV"
            },
            {
              "src": "assets/images/projects/tomra/2.jpg",
              "alt": "Tomra Food Sorting NV"
            },
            {
              "src": "assets/images/projects/tomra/3.jpg",
              "alt": "Tomra Food Sorting NV"
            },
            {
              "src": "assets/images/projects/tomra/4.jpg",
              "alt": "Tomra Food Sorting NV"
            },
            {
              "src": "assets/images/projects/tomra/5.jpg",
              "alt": "Tomra Food Sorting NV"
            },
            {
              "src": "assets/images/projects/tomra/6.jpg",
              "alt": "Tomra Food Sorting NV"
            },
            {
              "src": "assets/images/projects/tomra/7.jpg",
              "alt": "Tomra Food Sorting NV"
            },
            {
              "src": "assets/images/projects/tomra/98.jpg",
              "alt": "Tomra Food Sorting NV"
            }
          ],
          "review": {
            "author": "Tomra Food Sorting NV",
            "date": "March, 2018",
            "stars": 5,
            "description": "It was a pleasure working with the Expo Mate team for the Fruit Logistica Fair in Berlin. From the design phase all the way to the end result at the show, the team helped us realize our ideas. They suggested a creative design, detailed cost overview and the roll-out of the approved plan was good. The booth looked professional, gave us at TOMRA good exposure and branding. The thing I liked most is the personal and close follow-up. If there is anything that was not right (and as all of us know, these things happen during an exhibition :-) ), the team was there to come up with a solution."
          }
        },
        {
          "id": "netinsight",
          "header": "NETINSIGHT",
          "subTitle": "IBC Amsterdam, NAB Las Vegas",
          "description": "Der Netinsight-Stand war bereit für ein Upgrade. Das Aussehen und das Gefühl der Vergangenheit passte nicht mehr zu ihrer Corporate Identity und Marktposition. Darüber hinaus sollte das neue Konzept Netinsight ermöglichen, ihre innovativen Produkte klar zu präsentieren. Die drei verschiedenen Produktgruppen mussten innerhalb des Konzepts ihre eigene Identität bewahren. Außer der Produktgruppen und der Verwendung verschiedener AV-Lösungen, darunter 4 hochwertige LED-Bildschirme, haben wir einen Stand geschaffen, der nicht unbemerkt bleiben kann.",
          "images": [
            {
              "src": "assets/images/projects/net/3.jpg",
              "alt": "NETINSIGHT"
            },
            {
              "src": "assets/images/projects/net/4.jpg",
              "alt": "NETINSIGHT"
            },
            {
              "src": "/assets/images/projects/net/5.jpg",
              "alt": ""
            },
            {
              "src": "/assets/images/projects/net/6.jpg",
              "alt": ""
            },
            {
              "src": "assets/images/projects/net/2.jpg",
              "alt": "NETINSIGHT"
            },
            {
              "src": "assets/images/projects/net/1.jpg",
              "alt": "NETINSIGHT"
            }
          ],
          "review": {
            "author": "NETINSIGHT",
            "date": "October, 2018",
            "stars": 5,
            "description": "Easy to work with, creative, fast and responsible. Can easily recommend the guys at EXPO-MATE! Theres Eldin - Net Insight\n"
          }
        },
        {
          "id": "gates-air",
          "header": "GATES AIR",
          "subTitle": "IBC Amsterdam ",
          "description": "Dieses Konzept sollte die marktführende Position und die Qualität, für die Gates Air steht, besser widerspiegeln. Ohne Zweifel sollte die rote Farbe innerhalb ihrer Corporate Identity eine herausragende Rolle spielen. Das Gesamtkonzept sollte ein echter Hingucker sein und mit der von uns geschaffenen farbwechselnde LED-Decke glauben wir, dass erfolgreich umgesetzt zu haben.",
          "images": [
            {
              "src": "/assets/images/projects/gates/5.jpg",
              "alt": ""
            },
            {
              "src": "/assets/images/projects/gates/4.jpg",
              "alt": ""
            },
            {
              "src": "assets/images/projects/gates/2.jpg",
              "alt": "GATES AIR"
            },
            {
              "src": "assets/images/projects/gates/3.jpg",
              "alt": "GATES AIR"
            },
            {
              "src": "assets/images/projects/gates/1.jpg",
              "alt": "GATES AIR"
            }
          ],
          "review": {
            "author": "GATES AIR",
            "date": "October, 2018",
            "stars": 5,
            "description": "Working with EXPO-MATE for the IBC show in Amsterdam made my days stress-free. I truly feel that they are the best partners I have worked with with as they value their clients and the quality of the end product."
          }
        },
        {
          "id": "wvanderzwan",
          "header": "WvanderZwan",
          "subTitle": "Seafood Expo Global Brussel",
          "description": "Umsetzung des bestehenden Konzepts in einen hochwertigen Stand, wo die Besucher auch die Lounge im zweiten Stock genießen können. Kunden können somit kleine Snacks und Getränke in einer ungezwungenen Atmosphäre genießen.",
          "images": [
            {
              "src": "assets/images/projects/zwan/1.jpg",
              "alt": "WvanderZwan"
            },
            {
              "src": "assets/images/projects/zwan/2.jpg",
              "alt": "WvanderZwan"
            },
            {
              "src": "assets/images/projects/zwan/3.jpg",
              "alt": "WvanderZwan"
            },
            {
              "src": "assets/images/projects/zwan/4.jpg",
              "alt": "WvanderZwan"
            },
            {
              "src": "assets/images/projects/zwan/5.jpg",
              "alt": "WvanderZwan"
            },
            {
              "src": "assets/images/projects/zwan/6.jpg",
              "alt": "WvanderZwan"
            }
          ],
          "review": {
            "author": "WvanderZwan",
            "date": "May, 2018",
            "stars": 5,
            "description": "Partly because of our beautifully delivered stand at SEG 2018 in Brussels, we have had a great exhibition. Agreements have been fulfilled and the EXPO-MATE service is of the highest quality! On behalf of W. vand der Zwan &amp; Zonen BV we can recommend EXPO-MATE as a partner!"
          }
        },
        {
          "id": "metinvest",
          "header": "Metinvest",
          "subTitle": "BlechExpo Stuttgart",
          "description": "Der Betrieb MetInvest stellte uns die Aufgabe, einen Stand zu entwerfen, der eine moderne und doch eine gemütliche Ausstrahlung hatte. Das Logo sollte als großer Eye Catcher dienen. Da sehr begrenzte Platz sorgte dafür, dass eine gute Balance zwischen Design und Funktionalität gesucht werden musste. ",
          "images": [
            {
              "src": "/assets/images/projects/metinvest/1.jpg",
              "alt": ""
            },
            {
              "src": "/assets/images/projects/metinvest/2.jpg",
              "alt": ""
            },
            {
              "src": "/assets/images/projects/metinvest/3.jpg",
              "alt": ""
            },
            {
              "src": "/assets/images/projects/metinvest/4.jpg",
              "alt": ""
            },
            {
              "src": "/assets/images/projects/metinvest/5.jpg",
              "alt": ""
            },
            {
              "src": "/assets/images/projects/metinvest/6.jpg",
              "alt": ""
            },
            {
              "src": "/assets/images/projects/metinvest/7.jpg",
              "alt": ""
            }
          ],
          "review": {
            "author": "",
            "date": "",
            "stars": 0,
            "description": ""
          }
        },
        {
          "id": "scelta-mushrooms-bv",
          "header": "Scelta Mushrooms BV",
          "subTitle": "Anuga Köln, Sial Paris und FIE Frankfurt",
          "description": "Man wollte einen neuen Stand, der für alle Messen anders aufzubauen ist. Das Erleben des Standes sollte an die kürzlich eingebrachten Änderungen des Hausstils anschließen. Auch sollten Produkte präsentiert werden können, sowohl grafisch wie auch durch Live Kochen.",
          "images": [
            {
              "src": "assets/images/projects/scelta/1.jpg",
              "alt": "The Scelta Institute BV"
            },
            {
              "src": "assets/images/projects/scelta/2.jpg",
              "alt": "The Scelta Institute BV"
            },
            {
              "src": "assets/images/projects/scelta/3.jpg",
              "alt": "The Scelta Institute BV"
            },
            {
              "src": "assets/images/projects/scelta/4.jpg",
              "alt": "The Scelta Institute BV"
            },
            {
              "src": "assets/images/projects/scelta/5.jpg",
              "alt": "The Scelta Institute BV"
            }
          ],
          "review": {
            "author": "The Scelta Institute BV",
            "date": "August, 2017",
            "stars": 5,
            "description": "Very satisfied about the successful realization of our new exhibition stand and the reliable guidance of our participation at SIAL in 2016. A positive and pro-active attitude to get from creative ideas to a successful exhibition participation."
          }
        },
        {
          "id": "strong-tv",
          "header": "Strong TV",
          "subTitle": "ANGA Köln, IFA Berlin",
          "description": "Präsentation der verschiedenen Produktgruppen, wobei neben den neuesten TVs auch Platz für die diversen Receiver und WLAN-Lösungen sein sollte. Ein offener Stand, auf dem genug Raum ist, um viele Besucher begrüßen zu können.",
          "images": [
            {
              "src": "assets/images/projects/strong/1.jpg",
              "alt": "Strong TV"
            },
            {
              "src": "assets/images/projects/strong/2.jpg",
              "alt": "Strong TV"
            },
            {
              "src": "assets/images/projects/strong/3.jpg",
              "alt": "Strong TV"
            },
            {
              "src": "assets/images/projects/strong/4.jpg",
              "alt": "Strong TV"
            },
            {
              "src": "assets/images/projects/strong/5.jpg",
              "alt": "Strong TV"
            }
          ],
          "review": {
            "author": "Strong TV",
            "date": "July, 2017",
            "stars": 5,
            "description": "<p style=\"text-align: center; \">Very professional, friendly and helpful booth builder from the Netherlands.\n\nThe booth was completely built up on the day of arrival and all installations had been done. Small last-minute changes where no problem. Also, the communication with the booth builder team was easy (English/German/Dutch) and the team was very helpful.\nFounder, Mr. Jan Maas stayed until the end of the first day of the exhibition and made sure everything was in order.\nWe highly recommend this booth builder for any exhibition.\n\nOur booth was for the ANGA COM 2017 in Cologne and we definitely will work again with them for upcoming exhibitions.</p>"
          }
        },
        {
          "id": "frankort-koning-bv",
          "header": "Frankort & Koning BV",
          "subTitle": "Fruit Logistica Berlin ",
          "description": "Bestehenden Kunden und Kontakten das Gefühl eines warmen Willkommens geben, inklusive der Möglichkeit, Getränke und Häppchen anbieten zu können. Insgesamt ein Stand, den man gerne betritt und auf dem genug Platz ist, um ein gutes, informelles Gespräch miteinander zu führen.",
          "images": [
            {
              "src": "assets/images/projects/frankfort/1.jpg",
              "alt": "Frankort & Koning BV"
            },
            {
              "src": "assets/images/projects/frankfort/2.jpg",
              "alt": "Frankort & Koning BV"
            },
            {
              "src": "assets/images/projects/frankfort/3.jpg",
              "alt": "Frankort & Koning BV"
            },
            {
              "src": "assets/images/projects/frankfort/4.jpg",
              "alt": "Frankort & Koning BV"
            }
          ],
          "review": {
            "author": "Frankort & Koning BV",
            "date": "October, 2017",
            "stars": 5,
            "description": "A very professional and also personal collaboration with EXPO-MATE for our stand at the Fruitlogistica in Berlin. Agreements have been lived up to and the reality was exactly as per design. With a couple of minor adjustments we are ready for the 2018 edition! "
          }
        }
      ]
    }
  },
  "en": {
    "nav": {
      "labels": {
        "about": "Our Story",
        "foundation": "Our foundation",
        "mission": "Our Mission Statement and Vision",
        "aboutUs": "Who we are",
        "method": "Working method",
        "process": "Full service Proces",
        "model": "Our Expo-Mate Model",
        "comparison": "Turn design into realization",
        "values": "Our Core Values",
        "projects": "Projects",
        "contact": "Contact"
      }
    },
    "pages": {
      "homepage": {
        "header": {
          "content": {
            "header": "Management in Authentic and Trending Exhibition Participations",
            "backgroundImageSrc": "assets/images/mobile-bg.jpg",
            "backgroundVideoMp4Src": "assets/video/expo-mate.mp4",
            "backgroundVideoWebMSrc": "assets/video/expo-mate.webm",
            "youtubeURL": "3vSaz5GEigY"
          }
        },
        "content": {
          "intro": {
            "header": "Our Story",
            "description": "<p>We believe in the power of diversity. Bringing together all different disciplines to create the best results every single day for and more importantly, with our customers.&nbsp;</p>",
            "images": [
              {
                "src": "/assets/images/brands/arconic.jpg",
                "alt": ""
              },
              {
                "src": "assets/images/brands/bo-logo.png",
                "alt": "Borusan",
                "links": null
              },
              {
                "src": "assets/images/brands/toshiba.jpg",
                "alt": "Toshiba",
                "links": null
              },
              {
                "src": "assets/images/brands/tomra.jpg",
                "alt": "Tomra",
                "links": null
              },
              {
                "src": "/assets/images/brands/westfalia.jpg",
                "alt": ""
              },
              {
                "src": "assets/images/brands/lamb.jpg",
                "alt": "LambWeston",
                "links": null
              },
              {
                "src": "/assets/images/brands/Netinsight .jpg",
                "alt": ""
              },
              {
                "src": "/assets/images/brands/frankort.jpg",
                "alt": ""
              },
              {
                "src": "/assets/images/brands/Impol.jpg",
                "alt": ""
              },
              {
                "src": "/assets/images/brands/GatesAir.jpg",
                "alt": ""
              },
              {
                "src": "assets/images/brands/strong.jpg",
                "alt": "Strong TV",
                "links": null
              },
              {
                "src": "/assets/images/brands/avz.jpg",
                "alt": ""
              }
            ]
          },
          "about": {
            "row1": {
              "image": {
                "src": "assets/images/1.jpg"
              },
              "header": "Our foundation",
              "description": "<p>We bring 10 years of knowledge and understanding of the exhibition industry as well as 10 years of experience in the field of sales and marketing. This unique combination, allows us to accommodate and develop exhibition concepts like no others in the industry while delivering the highest return on investment.</p>"
            },
            "row2": {
              "image": {
                "src": "assets/images/2.jpg"
              },
              "header": "Our Mission Statement and Vision",
              "description": "<p>Everything we do at EXPO-MATE is based on our right of existence and our dream; our mission statement and vision.</p><p>Our mission statement: Making exhibition participations more successful, more efficient and easier.</p><p>Our vision: At EXPO-MATE we strive to be the most appreciated, leading quality organization within the industry. Wanting to be market leader as a full-service project management company by offering authentic, innovative, sustainable and custom-made projects for our clients while helping them to achieve their goals. Our clients are our ambassadors, and we make sure our ambassadors are not only completely satisfied with the result, but also with the path we take to get them there.</p>"
            }
          },
          "aboutUs": {
            "header": "Who we are?",
            "description": "<p><br></p>",
            "employees": {
              "niek": {
                "header": "Niek van Gent",
                "description": "<p>Being active as a commercial manager in a role of exhibition manager I understand the need of our clients as if it was my own. This results into a major value increasing element during the design process. By acting in the same role as our conversation partner, I can emphasize on their needs and wishes. My biggest motivation is to ensure the right conversion of the organization into a 3D concept for our clients!</p>",
                "image": {
                  "src": "assets/images/niek.jpg",
                  "alt": "Niek van Gent"
                }
              },
              "jan": {
                "header": "Jan Maas",
                "description": "<p>After 10 years of working as a Project- and Account Manager at two different companies in the exhibition industry, I strongly believe that personal attention, listening to clients, and fully understanding their goals and desires can be a game changer. This was the main reason for me to found EXPO-MATE. Based on my experience in both the commercial area as well as the technical aspect within the process, I can serve as a real sounding board to our clients. Commitment towards quality, making sure everything is taken care off in detail, and a high focus on personal attention and effective collaboration, are key in making it possible to achieve the (exhibition) goals: That is what drives me!</p>",
                "image": {
                  "src": "assets/images/jan.jpg",
                  "alt": "Jan Maas"
                }
              }
            }
          },
          "values": {
            "header": "Our Core Values",
            "description": "<p>Whether we are having an advising conversation, present a design concept or handing over a finished stand; everything we do is based on our core values which are listed below:</p>",
            "image": {
              "src": "assets/images/wall.jpg"
            },
            "values": {
              "value1": "Highest Quality",
              "value2": "Full Service",
              "value3": "Innovative & Authentic",
              "value4": "Independent",
              "value5": "Environmental friendly",
              "value6": "Operational Excellence"
            }
          },
          "method": {
            "header": "WORKING METHOD",
            "hoverLabel": "Move with your mouse over the orbs to learn more.",
            "description": "<p>Our diverse backgrounds not only serve as a solid foundation for EXPO-MATE, it has also helped us to develop a working method which is unique within the industry and enables us to deliver the highest return on investment for our clients. </p>",
            "methods": {
              "intro": {
                "header": "Introduction",
                "description": "A personal meet-up in which we discuss your needs, wishes and goals."
              },
              "design": {
                "header": "Design",
                "description": "Based on your input in addition to the outcome of our 'EXPO-MATE model' we create a authentic, innovative, custom design specifically for your exhibition concept."
              },
              "tuning": {
                "header": "Fine tuning",
                "description": "We will discuss the design together and if needed, tweak it based on your feedback to create an optimal, desired, definitive design."
              },
              "construction": {
                "header": "Technical preparation & realization",
                "description": "<p>We will completely take care of the technical preparations and construction of your booth. Naturally, As your partner it goes without saying that we\nwill be present during the complete build up, up to the moment of handover of\nthe turn-key project.</p>"
              },
              "eval": {
                "header": "Evaluation",
                "description": "<p>After the exhibition has ended, we would like to discuss the outcome together with our client and see if we have met your (exhibition) goals. If you have had a pleasant experience and if you have any feedback for any upcmoning projects. </p>"
              }
            }
          },
          "model": {
            "header": "THE EXPO-MATE MODEL",
            "description": "<p><font size=\"3\">From Introduction to Design</font><br><br></p><p>From our point of view, this is the most important step in the entire process. By investing time and knowledge into the first part of the process, no assumptions should be made during the creation of the concept. This allows us to fully focus on the only thing that matters; Integrating your identity, desires and needs as an exhibition participant. EXPO-MATE has developed its own - unique - model which enables us to implement key characteristics / values from the organization into the design proposal. We believe this is imperative to achieve the highest return on investment. We would be happy to explain to you in greater detail, how the EXPO-MATE model can bring value to you.  </p>",
            "image": {
              "src": "assets/images/model.jpg"
            }
          },
          "projects": {
            "header": "OUR PROJECTS",
            "description": "<p>Innovative &amp; Authentic. These two words are key in our designs. EXPO-MATE custom develops and creates every stand at the highest possible standard and quality. Please check out several examples of stands we have designed and executed for many of our ambassadors. Wondering what we can do for your organization? Please contact us!  </p>",
            "reviewLink": "Click here to view the review written by ",
            "button": {
              "label": "View our Projects"
            },
            "project1": {
              "header": "Borusan Mannesmann",
              "button": "Learn More",
              "image": {
                "src": "assets/images/projects/borusan/1.jpg",
                "alt": "Borusan"
              }
            },
            "project2": {
              "header": "Tomra",
              "button": "Learn More",
              "image": {
                "src": "assets/images/projects/tomra-asa/1.jpg",
                "alt": "Impol"
              }
            }
          },
          "comparison": {
            "header": "Turning design into reality.",
            "description": "<p>From the moment the initial sketches are drawn, we are thinking about how a potential design could be perfectly transformed from a design into reality. Below are some examples of how the design has turned into the actual stand</p>",
            "comparisons": [
              {
                "before": "assets/images/comparison/borusan/slider-before.jpg",
                "after": "assets/images/comparison/borusan/slider-after.jpg"
              },
              {
                "before": "assets/images/comparison/impol/slider-before.jpg",
                "after": "assets/images/comparison/impol/slider-after.jpg"
              },
              {
                "before": "assets/images/comparison/toshiba/slider-before.jpg",
                "after": "assets/images/comparison/toshiba/slider-after.jpg"
              },
              {
                "before": "assets/images/comparison/lamb/slider-before.jpg",
                "after": "assets/images/comparison/lamb/slider-after.jpg"
              },
              {
                "before": "assets/images/comparison/westfalia/slider-before.jpg",
                "after": "assets/images/comparison/westfalia/slider-after.jpg"
              },
              {
                "before": "assets/images/comparison/zwan/slider-before.jpg",
                "after": "assets/images/comparison/zwan/slider-after.jpg"
              },
              {
                "before": "assets/images/comparison/gates/slider-before.jpg",
                "after": "assets/images/comparison/gates/slider-after.jpg"
              },
              {
                "before": "assets/images/comparison/net/slider-before.jpg",
                "after": "assets/images/comparison/net/slider-after.jpg"
              }
            ]
          }
        },
        "footer": {
          "testimonials": {
            "header": "Testimonials"
          },
          "contacts": {
            "header": "Send us an Email",
            "jan": {
              "header": "Jan Maas",
              "links": {
                "email": {
                  "header": "j.maas@expo-mate.com",
                  "src": "mailto:j.maas@expo-mate.com",
                  "alt": "Email Jan"
                },
                "linkedin": {
                  "header": "Jan on",
                  "src": "https://nl.linkedin.com/in/maasjan",
                  "alt": "Jan on LinkedIn"
                }
              },
              "phone": "+31 6 50 28 18 91"
            },
            "niek": {
              "header": "Niek van Gent",
              "links": {
                "email": {
                  "header": "n.van.gent@expo-mate.com",
                  "src": "mailto:n.van.gent@expo-mate.com"
                },
                "linkedin": {
                  "header": "Niek on",
                  "src": "https://nl.linkedin.com/in/niek-van-gent-b538781b",
                  "alt": "Niek on LinkedIn"
                }
              },
              "phone": "+31 6 50 28 18 91"
            }
          },
          "phone": {
            "header": "Call us"
          },
          "visit": {
            "header": "Visit us",
            "description": "EXPO-MATE <br/> Mgr. Zwijsenstraat 2F <br/> 5914 AJ Venlo <br/> The Netherlands <br/><br/> PO Box 8064 <br/> 5901 AB Venlo"
          },
          "copyright": {
            "description": "Copyright 2018, Expo-Mate - All rights reserved."
          }
        }
      },
      "projects": [
        {
          "id": "tomra-systems",
          "header": "Tomra Systems",
          "subTitle": "Euroshop Düsseldorf",
          "description": "At the EuroShop TOMRA Systems wanted to introduce their new corporate identity and their new, state of the art machines. As a world leader in their industry, they asked us to create and build a unique and innovative stand that allowed them to present and tell their story how they prevent plastic coming into our oceans and environment. “Clean Loop Recycling” is the ultimate goal TOMRA strives for. What is a better way, than creating the “loop” as an eye catcher made above the stand existing out of color changing LED tubes? With an open landscape the visitors were invited to see the machines actually working, a large LED screen, and a lounge at the second floor, we take extreme pride in created this truly unique stand for TOMRA. ",
          "images": [],
          "review": {
            "author": "",
            "date": "",
            "stars": 0,
            "description": ""
          }
        },
        {
          "id": "borusan-mannesmann",
          "header": "Borusan Mannesmann",
          "subTitle": "TUBE Düsseldorf",
          "description": "Develop an exhibition concept in which Borusan Mannesmann would receive their most valued clients during their 60 years anniversary. Prestige to make the nicest concept to make the clients feel welcome and enjoy a drink and a bite. ",
          "images": [
            {
              "src": "assets/images/projects/borusan/1.jpg",
              "alt": "Borusan Mannesmann"
            },
            {
              "src": "assets/images/projects/borusan/2.jpg",
              "alt": "Borusan Mannesmann"
            },
            {
              "src": "assets/images/projects/borusan/3.jpg",
              "alt": "Borusan Mannesmann"
            },
            {
              "src": "assets/images/projects/borusan/4.jpg",
              "alt": "Borusan Mannesmann"
            },
            {
              "src": "assets/images/projects/borusan/5.jpg",
              "alt": "Borusan Mannesmann"
            },
            {
              "src": "assets/images/projects/borusan/6.jpg",
              "alt": "Borusan"
            },
            {
              "src": "assets/images/projects/borusan/7.jpg",
              "alt": "Borusan Mannesmann"
            },
            {
              "src": "assets/images/projects/borusan/8.jpg",
              "alt": "Borusan Mannesmann"
            },
            {
              "src": "assets/images/projects/borusan/9.jpg",
              "alt": "Borusan Mannesmann"
            },
            {
              "src": "assets/images/projects/borusan/10.jpg",
              "alt": "Borusan Mannesmann"
            },
            {
              "src": "assets/images/projects/borusan/11.jpg",
              "alt": "Borusan Mannesmann"
            },
            {
              "src": "assets/images/projects/borusan/12.jpg",
              "alt": "Borusan Mannesmann"
            },
            {
              "src": "assets/images/projects/borusan/13.jpg",
              "alt": "Borusan Mannesmann"
            },
            {
              "src": "assets/images/projects/borusan/14.jpg",
              "alt": "Borusan Mannesmann"
            },
            {
              "src": "assets/images/projects/borusan/15.jpg",
              "alt": "Borusan Mannesmann"
            },
            {
              "src": "assets/images/projects/borusan/16.jpg",
              "alt": "Borusan Mannesmann"
            }
          ],
          "review": {
            "author": "Borusan Mannesmann",
            "date": "May, 2018",
            "stars": 5,
            "description": "<p>We are totally satisfied working with EXPO-MATE in Düsseldorf Tube 2018. Their timing plan was fine, communication is always perfect, all the materials delivered as discussed. During the exhibition if we wanted to change something, Jan and his team arranged it immediately. We received very positive feedbacks from our customer who visited us on Tube 2018. Overall I can say EXPO-MATE is a very good company and if you have some vision or would like to get an idea from them, they will manage.</p>"
          }
        },
        {
          "id": "alrec",
          "header": "Alrec",
          "subTitle": "Euroshop Düsseldorf",
          "description": "As a high-class interior builder, with a brand-new corporate identity, Alrec needed to be represent at the EuroShop with a high-quality stand. We created a stand for them were style was combined with their new logo, pay off, graphics and a lot of technology. At the LED illuminated arch, visitors were able to experience the beautiful stores Alrec creates by the usage of augmented reality. At the hospitality area we placed a large LED screen. Alrec's 360 approach was presented on a large round display that included a large touch screen. The second floor allowed Alrec to speak to their visitors in a more private setting. ",
          "images": [],
          "review": {
            "author": "",
            "date": "",
            "stars": 0,
            "description": ""
          }
        },
        {
          "id": "impol",
          "header": "Impol",
          "subTitle": "Aluminium Düsseldorf",
          "description": "Impol wanted to have a stand in which the visitors would feel welcome and create enough space within the stand to have a drink and a bite to meet existing and new clients in a unconstrained atmosphere. The stand needed to have some separation elements to give the visitors a sense of security. These have been made with Impol products. The custom made, high quality, display tables offer the possibility to present up to the smallest aluminium parts. \n",
          "images": [
            {
              "src": "assets/images/projects/impol/2.jpg",
              "alt": "Impol"
            },
            {
              "src": "assets/images/projects/impol/3.jpg",
              "alt": "Impol"
            },
            {
              "src": "assets/images/projects/impol/4.jpg",
              "alt": "Impol"
            },
            {
              "src": "assets/images/projects/impol/1.jpg",
              "alt": "Impol"
            }
          ],
          "review": {
            "author": "IMPOL",
            "date": "October 2018",
            "stars": 5,
            "description": "In October 2018, Impol Group was exhibiting at Aluminium trade fair in Düsseldorf. Also, thanks to the guys Expo Mate, especially Jan (cheers, mate!), our exhibition success was perfect.\n\nWe decided to choose EXPO-MATE among other stand builders as their design was fresh, modern and in line with our expectation… and budget. \n\nWhen organizing such an event (it's not only building a stand, it's also taking care for the staff, visitors, hotels, stand party, catering etc.), there are zillions of things that could go wrong.  \n\nWhen a stand-builder understand your needs, when he is always there for you, helping you in every possible respect and making everything running smooth, then you can concentrate on the other little projects and tasks - and that makes your life a bit easier.\n\nThank you, guys, thank you, Jan.\n\nImpol Group\n\nPS:\nI was also playing around and compared accepted design (left picture) and stand after it was handled over. We could almost play game \"can you spot the difference?\"\n\nWell done!"
          }
        },
        {
          "id": "arconic",
          "header": "Arconic",
          "subTitle": "Aluminium Düsseldorf",
          "description": "Arconic’s logo allowed us to use diagonal shapes to design a unique stand. The mostly black color palette in combination with white and wood elements and teal LED light fixtures created a breathtaking combination of colors and shapes. To top it off, the high-end displays presented several elements around the stand itself.",
          "images": [
            {
              "src": "assets/images/projects/Arconic/1.jpg",
              "alt": "Arconic"
            },
            {
              "src": "assets/images/projects/Arconic/2.jpg",
              "alt": "Arconic"
            },
            {
              "src": "assets/images/projects/Arconic/3-2.JPG",
              "alt": "Arconic"
            },
            {
              "src": "assets/images/projects/Arconic/4.JPG",
              "alt": "Arconic"
            }
          ],
          "review": {
            "author": "ARCONIC",
            "date": "December 2018",
            "stars": 4,
            "description": "Very much enjoyed working with the Expo-Mate team for a show in Dusseldorf earlier this year. Expo-Mate provided us with efficient, effective and creative services - from design to execution - against the best 'value for money'. Above all, the team was hands on, flexible and fun to work with.\nAs a matter of ‘principle’, I don’t give a perfect ‘five star’ score, as there should always be a continuous strive for improvement. However Expo-Mate comes close to perfection and would pass the five-star test with flying colors (-;\nThey come highly recommended."
          }
        },
        {
          "id": "avz",
          "header": "Aluminium Verkoop Zuid BV (AVZ)",
          "subTitle": "R+T Stuttgart, Polyclose Gent",
          "description": "AVZ wanted to have an open and accessible stand which offered them the possibility to demonstrate their new corporate identity & showcase their most important products on the biggest show within their discipline.  ",
          "images": [
            {
              "src": "assets/images/projects/avz/3.jpg",
              "alt": "AVZ"
            },
            {
              "src": "assets/images/projects/avz/1.jpg",
              "alt": "AVZ"
            },
            {
              "src": "assets/images/projects/avz/2.jpg",
              "alt": "AVZ"
            },
            {
              "src": "assets/images/projects/avz/4.jpg",
              "alt": "AVZ"
            },
            {
              "src": "assets/images/projects/avz/5.jpg",
              "alt": "AVZ"
            }
          ],
          "review": {
            "author": "Aluminium Verkoop Zuid BV",
            "date": "March, 2018",
            "stars": 5,
            "description": "The cooperation with EXPO-MATE went flawlessly. All agreements have been properly fulfilled. Despite the many adjustments from our side, the stand looked great, was delivered on time and the stand actually looked the same as the design. Thanks EXPO-MATE!"
          }
        },
        {
          "id": "wanhua-chemical-group-borsodchem",
          "header": "Wanhua Chemical Group/BorsodChem",
          "subTitle": "K Düsseldorf",
          "description": "The assignment for the Wanhua Chemical Group and BorsodChem for their K-2019 stand was to be open, beautiful and eye catching. Offering the possibility for a big LED presentation. Wood materials in combination with environmental friendliness and a big eye catching banner above the stand. In this stand the Wanhua Chemical Group and BorsodChem would like to promote the “Green chemistry”, environmental responsibility and supplier of high quality raw materials.\n",
          "images": [
            {
              "src": "/assets/images/projects/borsod/1.jpg",
              "alt": ""
            },
            {
              "src": "/assets/images/projects/borsod/2.jpg",
              "alt": ""
            },
            {
              "src": "/assets/images/projects/borsod/3.jpg",
              "alt": ""
            },
            {
              "src": "/assets/images/projects/borsod/4.jpg",
              "alt": ""
            },
            {
              "src": "/assets/images/projects/borsod/5.jpg",
              "alt": ""
            },
            {
              "src": "/assets/images/projects/borsod/6.jpg",
              "alt": ""
            }
          ],
          "review": {
            "author": "Wanhua Chemical Group/Borsodchem",
            "date": "December 2019",
            "stars": 5,
            "description": "It was really a good experience working with EXPO-MATE! During the whole K fair preparation process, our project director Jan Maas always replied to our emails promptly, when we had some urgent request, he always responded to our demands quickly and tried his best to find a solution. His thoroughness, patience, his being helpful impressed me lot. Most importantly, the stand is very nice and good quality! I could only highly recommend this stand constructor!\n"
          }
        },
        {
          "id": "lamb-weston-meijer",
          "header": "Lamb Weston/Meijer",
          "subTitle": "European program",
          "description": "Creating a concept to show that Lamb Weston is a key player in the UK market in the expanding pub segment. How can this be done in a better way than creating a LambWeston pub? ",
          "images": [
            {
              "src": "assets/images/projects/lamb/1.jpg",
              "alt": "Lamb Weston/Meijer"
            },
            {
              "src": "assets/images/projects/lamb/2.jpg",
              "alt": "Lamb Weston/Meijer"
            },
            {
              "src": "assets/images/projects/lamb/3.jpg",
              "alt": "Lamb Weston/Meijer"
            },
            {
              "src": "assets/images/projects/lamb/4.jpg",
              "alt": "Lamb Weston/Meijer"
            },
            {
              "src": "assets/images/projects/lamb/5.jpg",
              "alt": "Lamb Weston/Meijer"
            },
            {
              "src": "assets/images/projects/lamb/6.jpg",
              "alt": "Lamb Weston/Meijer"
            },
            {
              "src": "assets/images/projects/lamb/7.jpg",
              "alt": "Lamb Weston/Meijer"
            },
            {
              "src": "assets/images/projects/lamb/8.jpg",
              "alt": ""
            },
            {
              "src": "assets/images/projects/lamb/9.jpg",
              "alt": ""
            },
            {
              "src": "assets/images/projects/lamb/10.jpg",
              "alt": ""
            },
            {
              "src": "assets/images/projects/lamb2/2.jpg",
              "alt": ""
            },
            {
              "src": "assets/images/projects/lamb2/1.jpg",
              "alt": ""
            },
            {
              "src": "assets/images/projects/lamb2/4.jpg",
              "alt": ""
            }
          ],
          "review": {
            "author": "Lamb Weston Meijer",
            "date": "October, 2018",
            "stars": 5,
            "description": "We’re working with EXPO-MATE already more than a year. They’ve created a natural looking pub environment for us at one of our most important shows in the UK. Jan and his team were creative, reliable and fast. Our last project in London was even more complex with an unusual and creative idea of our agency showcasing a new product. They found a solution and made it happen – even better than we had in mind. EXPO-MATE amended last minute wishes and delivered on site support as well. They also helped us in the communication with trade show organisers, which saved us a lot of time for other to do’s! It was a pleasure to work with the EXPO-MATE and we look forward to our three projects in the future! "
          }
        },
        {
          "id": "toshiba-business-display-solutions",
          "header": "Toshiba Business Display Solutions",
          "subTitle": "ISE Amsterdam",
          "description": "<p>The challenge for Toshiba was to deliver a stand concept in which many products and several business units could present their products in a structured stand concept.  </p>",
          "images": [
            {
              "src": "assets/images/projects/toshiba/1.jpg",
              "alt": "Toshiba"
            },
            {
              "src": "assets/images/projects/toshiba/2.jpg",
              "alt": "Toshiba"
            },
            {
              "src": "assets/images/projects/toshiba/3.jpg",
              "alt": "Toshiba"
            },
            {
              "src": "assets/images/projects/toshiba/4.jpg",
              "alt": "Toshiba"
            },
            {
              "src": "assets/images/projects/toshiba/5.jpg",
              "alt": "Toshiba"
            },
            {
              "src": "assets/images/projects/toshiba/6.jpg",
              "alt": "Toshiba"
            },
            {
              "src": "assets/images/projects/toshiba/7.jpg",
              "alt": "Toshiba"
            }
          ],
          "review": {
            "author": "Toshiba Business Display Solutions",
            "date": "February, 2018",
            "stars": 5,
            "description": "It was a pleasure working with Expo-Mate from the early planning stages through to the execution at the event. Everything was effortless and well thought out - communicative, friendly team. We were very pleased with the end result and received much positive feedback on the Toshiba Business Display Solutions stand itself at ISE 2018, Amsterdam. We look forward to working with you again in the future thanks again, EXPO-MATE."
          }
        },
				{
          "id": "tubacex",
          "header": "TUBACEX",
          "subTitle": "TUBE Düsseldorf",
          "description": "They wanted an open and warm stand. A place where they could talk to customers in a relaxed and cozy atmosphere while enjoying a snack and drink.",
          "images": [
            {
              "src": "assets/images/projects/tubacex/1.jpg",
              "alt": "TUBACEX"
            },
            {
              "src": "assets/images/projects/tubacex/2.jpg",
              "alt": "TUBACEX"
            },
            {
              "src": "assets/images/projects/tubacex/3.jpg",
              "alt": "TUBACEX"
            },
            {
              "src": "assets/images/projects/tubacex/4.jpg",
              "alt": "TUBACEX"
            },
            {
              "src": "assets/images/projects/tubacex/5.jpg",
              "alt": "TUBACEX"
            }
          ],
          "review": {
            "author": "",
            "date": "",
            "stars": 0,
            "description": ""
          }
        },
        {
          "id": "westfalia",
          "header": "Westfalia",
          "subTitle": "Fruit Logistica Berlin, PMA Anaheim, Fruit Attraction Madrid",
          "description": "Westfalia requested EXPO-MATE to develop a new stand concept with a more optimal use of the stand space and an upgrade in terms of quality. Because of the many meetings with clients, they preferred to have 6 meeting rooms plus an open and welcoming hospitality section on the stand where they can speak to their customers in a more informal atmosphere. The stand surface consists of 2 parts with an aisle in between. That is why we have set up the concept so that it looks like a real entity. The entire concept is of high quality and has the appearance that reflects the leading market position of Westfalia.",
          "images": [
            {
              "src": "/assets/images/projects/westfalia/1.jpg",
              "alt": ""
            },
            {
              "src": "/assets/images/projects/westfalia/2.jpg",
              "alt": ""
            },
            {
              "src": "/assets/images/projects/westfalia/3.jpg",
              "alt": ""
            },
            {
              "src": "/assets/images/projects/westfalia/4.jpg",
              "alt": ""
            }
          ],
          "review": {
            "author": "WESTFALIA",
            "date": "March, 2019",
            "stars": 5,
            "description": "Simply can't fault the Expo-Mate team on the quality of stand they produced for us at Fruit Logistica Berlin and the professionalism of their services. It was a pleasure working with the team and I'm sure there will be more opportunities to do so in future. Thanks!"
          }
        },
        {
          "id": "hoogstraten",
          "header": "Hoogstraten",
          "subTitle": "Fruit Attraction Madrid",
          "description": "The stand Hoogstraten used for a few years at the Fruit Attraction needed an update. Open, welcome, high quality and sustainable were starting points for this beautiful concept. The large light logo at the moss wall was a true eye-catcher and products were displayed at the custom-made steel frame at the font of the, and near the hospitality area in custom made fruit boxes.   ",
          "images": [],
          "review": {
            "author": "Hoogstraten Aardbeien",
            "date": "December 2019",
            "stars": 5,
            "description": "We had a very nice collaboration with EXPO-MATE. Helpful and reliable. The result was a beautifully finished exhibition stand."
          }
        },
        {
          "id": "tomra-food-sorting-nv",
          "header": "Tomra Food Sorting NV",
          "subTitle": "European Program",
          "description": "<p>Standing out from the rest, clean &amp; stopping power; that's what Tomra wanted to see in the stand concept. Because of the given program with different locations and dimensions, materials have to be re-usable. This way a cost efficient structure can be setup.</p>",
          "images": [
                       {
              "src": "assets/images/projects/tomra/1.jpg",
              "alt": "Tomra Food Sorting NV"
            },
            {
              "src": "assets/images/projects/tomra/2.jpg",
              "alt": "Tomra Food Sorting NV"
            },
            {
              "src": "assets/images/projects/tomra/3.jpg",
              "alt": "Tomra Food Sorting NV"
            },
            {
              "src": "assets/images/projects/tomra/4.jpg",
              "alt": "Tomra Food Sorting NV"
            },
            {
              "src": "assets/images/projects/tomra/5.jpg",
              "alt": "Tomra Food Sorting NV"
            },
            {
              "src": "assets/images/projects/tomra/6.jpg",
              "alt": "Tomra Food Sorting NV"
            },
            {
              "src": "assets/images/projects/tomra/7.jpg",
              "alt": "Tomra Food Sorting NV"
            },
            {
              "src": "assets/images/projects/tomra/98.jpg",
              "alt": "Tomra Food Sorting NV"
            }
          ],
          "review": {
            "author": "Tomra Food Sorting NV",
            "date": "March, 2018",
            "stars": 5,
            "description": "It was a pleasure working with the Expo Mate team for the Fruit Logistica Fair in Berlin. From the design phase all the way to the end result at the show, the team helped us realize our ideas. They suggested a creative design, detailed cost overview and the roll-out of the approved plan was good. The booth looked professional, gave us at TOMRA good exposure and branding. The thing I liked most is the personal and close follow-up. If there is anything that was not right (and as all of us know, these things happen during an exhibition :-) ), the team was there to come up with a solution."
          }
        },
        {
          "id": "netinsight",
          "header": "NETINSIGHT",
          "subTitle": "IBC Amsterdam, NAB Las Vegas",
          "description": "<p>The Netinsight booth was ready for an upgrade. The past look and feel didn’t fit to their corporate identity and market position any longer. Besides that the new concept should enable Netinsight to present their innovative products in a clear way. The 3 different product groups would need to maintain their own identity within the concept. &nbsp;Except the product groups and the use of different AV solutions among which 4 high quality LED screens, we created a stand that couldn’t be left unnoticed.</p>",
          "images": [
            {
              "src": "assets/images/projects/net/3.jpg",
              "alt": "NETINSIGHT"
            },
            {
              "src": "assets/images/projects/net/4.jpg",
              "alt": "NETINSIGHT"
            },
            {
              "src": "/assets/images/projects/net/5.jpg",
              "alt": ""
            },
            {
              "src": "/assets/images/projects/net/6.jpg",
              "alt": ""
            },
            {
              "src": "assets/images/projects/net/2.jpg",
              "alt": "NETINSIGHT"
            },
            {
              "src": "assets/images/projects/net/1.jpg",
              "alt": "NETINSIGHT"
            }
          ],
          "review": {
            "author": "NETINSIGHT",
            "date": "October, 2018",
            "stars": 5,
            "description": "<p> Easy to work with, creative, fast and responsible. Can easily recommend the guys at EXPO-MATE! Theres Eldin - Net Insight</p>"
          }
        },
        {
          "id": "gates-air",
          "header": "Gates Air",
          "subTitle": "IBC Amsterdam",
          "description": "<p>Gates Air wanted to have a new appearance for their stand on their most important European show; IBC in Amsterdam. This concept should be a better reflection of their market leading position and the quality that Gates Air stands for. It would be without a doubt that the red colour within their corporate identity should be playing a prominent role. The total concept should be a real eye catcher creating a color changing LED ceiling we feel we have succeeded.</p>",
          "images": [
            {
              "src": "/assets/images/projects/gates/5.jpg",
              "alt": ""
            },
            {
              "src": "/assets/images/projects/gates/4.jpg",
              "alt": ""
            },
            {
              "src": "assets/images/projects/gates/2.jpg",
              "alt": "Gates Air"
            },
            {
              "src": "assets/images/projects/gates/3.jpg",
              "alt": "Gates Air"
            },
            {
              "src": "assets/images/projects/gates/1.jpg",
              "alt": "Gates Air"
            }
          ],
          "review": {
            "author": "Gates Air",
            "date": "October, 2018",
            "stars": 5,
            "description": "<p>Working with EXPO-MATE for the IBC show in Amsterdam made my days stress-free. I truly feel that they are the best partners I have worked with with as they value their clients and the quality of the end product.</p>"
          }
        },
        {
          "id": "wvanderzwan-zonen",
          "header": "WvanderZwan & Zonen",
          "subTitle": "Seafood Expo Global Brussels",
          "description": "Conversion of the existing concept in a high-quality stand where visitors are also given the possibility to enjoy the second storey lounge. Clients can enjoy small bites and drinks in a casual atmosphere. ",
          "images": [
            {
              "src": "assets/images/projects/zwan/1.jpg",
              "alt": "WvanderZwan"
            },
            {
              "src": "assets/images/projects/zwan/2.jpg",
              "alt": "WvanderZwan"
            },
            {
              "src": "assets/images/projects/zwan/3.jpg",
              "alt": "WvanderZwan"
            },
            {
              "src": "assets/images/projects/zwan/4.jpg",
              "alt": "WvanderZwan"
            },
            {
              "src": "assets/images/projects/zwan/5.jpg",
              "alt": "WvanderZwan"
            },
            {
              "src": "assets/images/projects/zwan/6.jpg",
              "alt": "WvanderZwan"
            }
          ],
          "review": {
            "author": "WvanderZwan",
            "date": "May, 2018",
            "stars": 5,
            "description": "<p>Partly because of our beautifully delivered stand at SEG 2018 in Brussels, we have had a great exhibition. Agreements have been fulfilled and the EXPO-MATE service is of the highest quality! On behalf of W. van der Zwan &amp; Zonen BV we can recommend EXPO-MATE as a partner!</p>"
          }
        },
        {
          "id": "metinvest",
          "header": "Metinvest",
          "subTitle": "BlechExpo Stuttgart",
          "description": "A modern, business style stand in a cosy setting, with the company logo as an eye catcher/art piece. That was the question we got from Metinvest. The challenge for this stand was the limited space so it needed to have a balance between design and functionality. ",
          "images": [
            {
              "src": "/assets/images/projects/metinvest/1.jpg",
              "alt": ""
            },
            {
              "src": "/assets/images/projects/metinvest/2.jpg",
              "alt": ""
            },
            {
              "src": "/assets/images/projects/metinvest/3.jpg",
              "alt": ""
            },
            {
              "src": "/assets/images/projects/metinvest/4.jpg",
              "alt": ""
            },
            {
              "src": "/assets/images/projects/metinvest/5.jpg",
              "alt": ""
            },
            {
              "src": "/assets/images/projects/metinvest/6.jpg",
              "alt": ""
            },
            {
              "src": "/assets/images/projects/metinvest/7.jpg",
              "alt": ""
            }
          ],
          "review": {
            "author": "",
            "date": "",
            "stars": 0,
            "description": ""
          }
        },
        {
          "id": "scelta-mushrooms-bv",
          "header": "Scelta Mushrooms BV",
          "subTitle": "Anuga Cologne, Sial Paris and FIE Frankfurt",
          "description": "Scelta wanted to invest into a new stand which would be existing of modular elements that could be re-used for different shows. It should maintain the same look &amp; feel and be able to present their products in a graphic way but also by usage of live cooking.",
          "images": [
            {
              "src": "assets/images/projects/scelta/1.jpg",
              "alt": "The Scelta Institute BV"
            },
            {
              "src": "assets/images/projects/scelta/2.jpg",
              "alt": "The Scelta Institute BV"
            },
            {
              "src": "assets/images/projects/scelta/3.jpg",
              "alt": "The Scelta Institute BV"
            },
            {
              "src": "assets/images/projects/scelta/4.jpg",
              "alt": "The Scelta Institute BV"
            },
            {
              "src": "assets/images/projects/scelta/5.jpg",
              "alt": "The Scelta Institute BV"
            }
          ],
          "review": {
            "author": "The Scelta Institute BV",
            "date": "August, 2017",
            "stars": 5,
            "description": "<p>Very satisfied about the successful realization of our new exhibition stand and the reliable guidance of our participation at SIAL in 2016. A positive and pro-active attitude to get from creative ideas to a successful exhibition participation. </p>"
          }
        },
        {
          "id": "strong-tv",
          "header": "Strong TV",
          "subTitle": "ANGA Cologne, IFA Berlin",
          "description": "Presenting WiFi products as well as televisions on 1 stand and be able to host private conversations with clients in meeting rooms or an informal cup of coffee at the bar. Products take the upper hand at the exhibitions that STRONG TV participates at. ",
          "images": [
            {
              "src": "assets/images/projects/strong/1.jpg",
              "alt": "Strong TV"
            },
            {
              "src": "assets/images/projects/strong/2.jpg",
              "alt": "Strong TV"
            },
            {
              "src": "assets/images/projects/strong/3.jpg",
              "alt": "Strong TV"
            },
            {
              "src": "assets/images/projects/strong/4.jpg",
              "alt": "Strong TV"
            },
            {
              "src": "assets/images/projects/strong/5.jpg",
              "alt": "Strong TV"
            }
          ],
          "review": {
            "author": "Strong TV",
            "date": "July, 2017",
            "stars": 5,
            "description": "<p>Very professional, friendly and helpful booth builder from the Netherlands.<br><br>The booth was completely built up on the day of arrival and all installations had been done. Small last-minute changes where no problem. Also, the communication with the booth builder team was easy (English/German/Dutch) and the team was very helpful.<br>Founder, Mr. Jan Maas stayed until the end of the first day of the exhibition and made sure everything was in order.<br>We highly recommend this booth builder for any exhibition.<br><br>Our booth was for the ANGA COM 2017 in Cologne and we definitely will work again with them for upcoming exhibitions.</p>"
          }
        },
        {
          "id": "frankort-koning-bv",
          "header": "Frankort & Koning BV",
          "subTitle": "Fruit Logistica Berlin ",
          "description": "The yearly fruit exhibition in Berlin offers Frankort &amp; Koning the possibility to meet up with clients and suppliers from all over the world active within their industry. An approachable stand where hospitality plays a major factor and was the starting point.",
          "images": [
            {
              "src": "assets/images/projects/frankfort/1.jpg",
              "alt": "Frankort & Koning BV"
            },
            {
              "src": "assets/images/projects/frankfort/2.jpg",
              "alt": "Frankort & Koning BV"
            },
            {
              "src": "assets/images/projects/frankfort/3.jpg",
              "alt": "Frankort & Koning BV"
            },
            {
              "src": "assets/images/projects/frankfort/4.jpg",
              "alt": "Frankort & Koning BV"
            }
          ],
          "review": {
            "author": "Frankort & Koning BV",
            "date": "October, 2017",
            "stars": 5,
            "description": "<p>A very professional and also personal collaboration with EXPO-MATE for our stand at the Fruitlogistica in Berlin. Agreements have been lived up to and the reality was exactly as per design. With a couple of minor adjustments we are ready for the 2018 edition! <br></p>"
          }
        }
      ]
    }
  }
}